<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="openfdem__commom_8c" kind="file" language="C++">
    <compoundname>openfdem_commom.c</compoundname>
    <includes refid="openfdem__commom_8h" local="yes">openfdem_commom.h</includes>
    <includes local="no">direct.h</includes>
    <includes local="yes">../solid/solid_mechanics_cohesive/openfdem_solid_cohesive.h</includes>
    <incdepgraph>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="1">
        <label>openfdem_commom.c</label>
        <link refid="openfdem__commom_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>openfdem_enum.h</label>
        <link refid="openfdem__enum_8h"/>
      </node>
      <node id="2">
        <label>openfdem_commom.h</label>
        <link refid="openfdem__commom_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>openfdem_message.h</label>
        <link refid="openfdem__message_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>direct.h</label>
      </node>
      <node id="6">
        <label>limits.h</label>
      </node>
      <node id="5">
        <label>string.h</label>
      </node>
      <node id="7">
        <label>signal.h</label>
      </node>
      <node id="12">
        <label>../solid/solid_mechanics_cohesive/openfdem_solid_cohesive.h</label>
      </node>
      <node id="10">
        <label>openfdem_struct.h</label>
        <link refid="openfdem__struct_8h"/>
      </node>
      <node id="4">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="openfdem__commom_8c_1a9ddf075ceb350d249e41419efc16a644" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int TrapCtrlCBreak</definition>
        <argsstring></argsstring>
        <name>TrapCtrlCBreak</name>
        <initializer>= 1000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="openfdem_commom.c" line="744" column="12" bodyfile="openfdem_commom.c" bodystart="744" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="openfdem__commom_8c_1a953729d06f7e62d095e1a9ebdc6bb149" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void get_filename_no_path</definition>
        <argsstring>(char *c1, char *c2)</argsstring>
        <name>get_filename_no_path</name>
        <param>
          <type>char *</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>c2</declname>
        </param>
        <briefdescription>
<para>filename <ref refid="openfdem__math_8c" kindref="compound">openfdem_math.c</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>author Xiaofeng Li <ulink url="mailto:xfli@whrsm.ac.cn">xfli@whrsm.ac.cn</ulink></para>
<para>date creation: Fri Jun 18 2010 date last modification: Tue Sep 29 2020</para>
<para>function: common math</para>
<sect1 id="openfdem__tools_8h_1LICENSE">
<title>LICENSE</title>
<para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para>
<para>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details. </para>
</sect1>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="openfdem_commom.c" line="30" column="6" bodyfile="openfdem_commom.c" bodystart="30" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="openfdem__commom_8c_1a2cbe3020e43def7bdbf2cbb57eba43bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void get_path</definition>
        <argsstring>(char *c1, char *c2)</argsstring>
        <name>get_path</name>
        <param>
          <type>char *</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>c2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="openfdem_commom.c" line="47" column="6" bodyfile="openfdem_commom.c" bodystart="47" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="openfdem__commom_8c_1ad222eb58d23c97b1efd0fb5857d2a685" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void get_filename_no_suffix</definition>
        <argsstring>(char *c1, char *c2)</argsstring>
        <name>get_filename_no_suffix</name>
        <param>
          <type>char *</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>c2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="openfdem_commom.c" line="63" column="6" bodyfile="openfdem_commom.c" bodystart="63" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="openfdem__commom_8c_1aeb63f42627aa7844f127e016eff2cb0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void get_suffix</definition>
        <argsstring>(char *c1, char *c2)</argsstring>
        <name>get_suffix</name>
        <param>
          <type>char *</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>c2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="openfdem_commom.c" line="79" column="6" bodyfile="openfdem_commom.c" bodystart="79" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="openfdem__commom_8c_1ae99538b7a858821ae21d6ea432192455" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void strip_ext</definition>
        <argsstring>(char *fname)</argsstring>
        <name>strip_ext</name>
        <param>
          <type>char *</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="openfdem_commom.c" line="95" column="6" bodyfile="openfdem_commom.c" bodystart="95" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="openfdem__commom_8c_1a6fa2ebf2818d694438596ef6beb65e96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parse_string</definition>
        <argsstring>(FILE *InputFile, char *c1)</argsstring>
        <name>parse_string</name>
        <param>
          <type>FILE *</type>
          <declname>InputFile</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>c1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="openfdem_commom.c" line="108" column="6" bodyfile="openfdem_commom.c" bodystart="108" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="openfdem__commom_8c_1a9fb67a9b32c39c75beeb77d6f6ecdbf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double *</type>
        <definition>double* malloc_1D_double_array</definition>
        <argsstring>(long m1)</argsstring>
        <name>malloc_1D_double_array</name>
        <param>
          <type>long</type>
          <declname>m1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="openfdem_commom.c" line="114" column="8" bodyfile="openfdem_commom.c" bodystart="114" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="openfdem__commom_8c_1a8f14e1fb10db366742b22c28eb480c23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double *</type>
        <definition>double* initialize_1D_double_array</definition>
        <argsstring>(long m1, double dini)</argsstring>
        <name>initialize_1D_double_array</name>
        <param>
          <type>long</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dini</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="openfdem_commom.c" line="121" column="8" bodyfile="openfdem_commom.c" bodystart="121" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="openfdem__commom_8c_1a775d41b3e9fccb53efa5ed050f9006a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double **</type>
        <definition>double** malloc_2D_double_array</definition>
        <argsstring>(long m2, long m1)</argsstring>
        <name>malloc_2D_double_array</name>
        <param>
          <type>long</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>long</type>
          <declname>m1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="openfdem_commom.c" line="134" column="8" bodyfile="openfdem_commom.c" bodystart="134" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="openfdem__commom_8c_1a135d4d0bce0649a5fccdf6b70df4fc2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double **</type>
        <definition>double** initialize_2D_double_array</definition>
        <argsstring>(long m2, long m1, double dini)</argsstring>
        <name>initialize_2D_double_array</name>
        <param>
          <type>long</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>long</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dini</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="openfdem_commom.c" line="156" column="8" bodyfile="openfdem_commom.c" bodystart="156" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="openfdem__commom_8c_1a7421b6d81d94fc5929920dc4bfc7836a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double ***</type>
        <definition>double*** malloc_3D_double_array</definition>
        <argsstring>(long m3, long m2, long m1)</argsstring>
        <name>malloc_3D_double_array</name>
        <param>
          <type>long</type>
          <declname>m3</declname>
        </param>
        <param>
          <type>long</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>long</type>
          <declname>m1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="openfdem_commom.c" line="181" column="8" bodyfile="openfdem_commom.c" bodystart="181" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="openfdem__commom_8c_1a17dbcbf772a2abfab531a7b5232bbfcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double ***</type>
        <definition>double*** initialize_3D_double_array</definition>
        <argsstring>(long m3, long m2, long m1, double dini)</argsstring>
        <name>initialize_3D_double_array</name>
        <param>
          <type>long</type>
          <declname>m3</declname>
        </param>
        <param>
          <type>long</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>long</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dini</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="openfdem_commom.c" line="210" column="8" bodyfile="openfdem_commom.c" bodystart="210" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="openfdem__commom_8c_1aa0fd612d2737f61a0e4fb3ea9eac1152" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long *</type>
        <definition>long* malloc_1D_int_array</definition>
        <argsstring>(long m1)</argsstring>
        <name>malloc_1D_int_array</name>
        <param>
          <type>long</type>
          <declname>m1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="openfdem_commom.c" line="251" column="6" bodyfile="openfdem_commom.c" bodystart="251" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="openfdem__commom_8c_1a949156108abf19843c73d35073f3b93b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long *</type>
        <definition>long* initialize_1D_int_array</definition>
        <argsstring>(Int m1, Int iini)</argsstring>
        <name>initialize_1D_int_array</name>
        <param>
          <type><ref refid="openfdem__struct_8h_1a91adff1610bdf681555a8f2e330dc963" kindref="member">Int</ref></type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="openfdem__struct_8h_1a91adff1610bdf681555a8f2e330dc963" kindref="member">Int</ref></type>
          <declname>iini</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="openfdem_commom.c" line="259" column="6" bodyfile="openfdem_commom.c" bodystart="259" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="openfdem__commom_8c_1a2c972d77af801a1f8cea61f684c7b515" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="openfdem__struct_8h_1a26ff0e0ab71ea1ed8bac401c56ed2242" kindref="member">UInt</ref> *</type>
        <definition>UInt* realloc_UInt_array</definition>
        <argsstring>(UInt *array, UInt size)</argsstring>
        <name>realloc_UInt_array</name>
        <param>
          <type><ref refid="openfdem__struct_8h_1a26ff0e0ab71ea1ed8bac401c56ed2242" kindref="member">UInt</ref> *</type>
          <declname>array</declname>
        </param>
        <param>
          <type><ref refid="openfdem__struct_8h_1a26ff0e0ab71ea1ed8bac401c56ed2242" kindref="member">UInt</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="openfdem_commom.c" line="271" column="6" bodyfile="openfdem_commom.c" bodystart="271" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="openfdem__commom_8c_1a7b41dba21c77adeae6dd90f7cc038066" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int *</type>
        <definition>int* realloc_Int_array</definition>
        <argsstring>(int *array, int size)</argsstring>
        <name>realloc_Int_array</name>
        <param>
          <type>int *</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="openfdem_commom.c" line="279" column="5" bodyfile="openfdem_commom.c" bodystart="279" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="openfdem__commom_8c_1a3ea49b16ac7c8f615eae074a829494fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="openfdem__struct_8h_1a26ff0e0ab71ea1ed8bac401c56ed2242" kindref="member">UInt</ref> *</type>
        <definition>UInt* initialize_1D_UInt_array</definition>
        <argsstring>(UInt m1, UInt iini)</argsstring>
        <name>initialize_1D_UInt_array</name>
        <param>
          <type><ref refid="openfdem__struct_8h_1a26ff0e0ab71ea1ed8bac401c56ed2242" kindref="member">UInt</ref></type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="openfdem__struct_8h_1a26ff0e0ab71ea1ed8bac401c56ed2242" kindref="member">UInt</ref></type>
          <declname>iini</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="openfdem_commom.c" line="292" column="6" bodyfile="openfdem_commom.c" bodystart="292" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="openfdem__commom_8c_1acb9b2b8f3672919f95a07c99e60c7fca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long **</type>
        <definition>long** malloc_2D_int_array</definition>
        <argsstring>(long m2, long m1)</argsstring>
        <name>malloc_2D_int_array</name>
        <param>
          <type>long</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>long</type>
          <declname>m1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="openfdem_commom.c" line="305" column="6" bodyfile="openfdem_commom.c" bodystart="305" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="openfdem__commom_8c_1aed43181f659652b1528b8d258d7ea0cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long **</type>
        <definition>long** initialize_2D_int_array</definition>
        <argsstring>(long m2, long m1, long iini)</argsstring>
        <name>initialize_2D_int_array</name>
        <param>
          <type>long</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>long</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>long</type>
          <declname>iini</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="openfdem_commom.c" line="327" column="6" bodyfile="openfdem_commom.c" bodystart="327" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="openfdem__commom_8c_1a947d1a55deeab18a67ecfd434e44f387" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structof__tensor" kindref="compound">of_tensor</ref> *</type>
        <definition>of_tensor* initialize_1D_tensor</definition>
        <argsstring>(unsigned int size, double double_ini)</argsstring>
        <name>initialize_1D_tensor</name>
        <param>
          <type>unsigned int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>double</type>
          <declname>double_ini</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="openfdem_commom.c" line="351" column="11" bodyfile="openfdem_commom.c" bodystart="351" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="openfdem__commom_8c_1a209a0c132db108f6d825d6cd9909480e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structof__tensor" kindref="compound">of_tensor</ref> *</type>
        <definition>of_tensor* parse_1D_tensor</definition>
        <argsstring>(FILE *fileptr, UInt size, Real double_ini)</argsstring>
        <name>parse_1D_tensor</name>
        <param>
          <type>FILE *</type>
          <declname>fileptr</declname>
        </param>
        <param>
          <type><ref refid="openfdem__struct_8h_1a26ff0e0ab71ea1ed8bac401c56ed2242" kindref="member">UInt</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="openfdem__struct_8h_1a060b837c3b4486ee35317744156f3da2" kindref="member">Real</ref></type>
          <declname>double_ini</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="openfdem_commom.c" line="372" column="11" bodyfile="openfdem_commom.c" bodystart="372" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="openfdem__commom_8c_1a0a90dbba82635af5da1ef37ed53adccb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parse_1D_double_array</definition>
        <argsstring>(FILE *fileptr, double dinit, long max_size, long actual_size, double **d1aray)</argsstring>
        <name>parse_1D_double_array</name>
        <param>
          <type>FILE *</type>
          <declname>fileptr</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dinit</declname>
        </param>
        <param>
          <type>long</type>
          <declname>max_size</declname>
        </param>
        <param>
          <type>long</type>
          <declname>actual_size</declname>
        </param>
        <param>
          <type>double **</type>
          <declname>d1aray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="openfdem_commom.c" line="415" column="6" bodyfile="openfdem_commom.c" bodystart="415" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="openfdem__commom_8c_1ab96946f187e9d673ae894f7d5de3f34f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NULL_vector</definition>
        <argsstring>(of_vector *d1aray)</argsstring>
        <name>NULL_vector</name>
        <param>
          <type><ref refid="structof__vector" kindref="compound">of_vector</ref> *</type>
          <declname>d1aray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="openfdem_commom.c" line="441" column="6" bodyfile="openfdem_commom.c" bodystart="441" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="openfdem__commom_8c_1a40c0b3bf8e49a1f4384b6e09fa394f68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parse_vector</definition>
        <argsstring>(FILE *fileptr, double dinit, of_vector *d1aray)</argsstring>
        <name>parse_vector</name>
        <param>
          <type>FILE *</type>
          <declname>fileptr</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dinit</declname>
        </param>
        <param>
          <type><ref refid="structof__vector" kindref="compound">of_vector</ref> *</type>
          <declname>d1aray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="openfdem_commom.c" line="447" column="6" bodyfile="openfdem_commom.c" bodystart="447" bodyend="459"/>
      </memberdef>
      <memberdef kind="function" id="openfdem__commom_8c_1aad351edf42fca5614e7ad3a7b9152910" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parse_1D_vector</definition>
        <argsstring>(FILE *fileptr, double dinit, long max_size, long actual_size, of_vector **d1aray)</argsstring>
        <name>parse_1D_vector</name>
        <param>
          <type>FILE *</type>
          <declname>fileptr</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dinit</declname>
        </param>
        <param>
          <type>long</type>
          <declname>max_size</declname>
        </param>
        <param>
          <type>long</type>
          <declname>actual_size</declname>
        </param>
        <param>
          <type><ref refid="structof__vector" kindref="compound">of_vector</ref> **</type>
          <declname>d1aray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="openfdem_commom.c" line="461" column="6" bodyfile="openfdem_commom.c" bodystart="461" bodyend="487"/>
      </memberdef>
      <memberdef kind="function" id="openfdem__commom_8c_1acc215ce7f8b79ad68947fc96f4023bad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parse_2D_double_array</definition>
        <argsstring>(FILE *fileptr, double dinit, long m1, long m2, long how, long readtitle1, long readtitle2, double ***d2aray)</argsstring>
        <name>parse_2D_double_array</name>
        <param>
          <type>FILE *</type>
          <declname>fileptr</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dinit</declname>
        </param>
        <param>
          <type>long</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>long</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>long</type>
          <declname>how</declname>
        </param>
        <param>
          <type>long</type>
          <declname>readtitle1</declname>
        </param>
        <param>
          <type>long</type>
          <declname>readtitle2</declname>
        </param>
        <param>
          <type>double ***</type>
          <declname>d2aray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="openfdem_commom.c" line="490" column="6" bodyfile="openfdem_commom.c" bodystart="490" bodyend="534"/>
      </memberdef>
      <memberdef kind="function" id="openfdem__commom_8c_1a3659e4c055398b7237e6ce2e807a52cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parse_3D_double_array</definition>
        <argsstring>(FILE *fileptr, double dinit, long m1, long m2, long m3, double ****d3aray)</argsstring>
        <name>parse_3D_double_array</name>
        <param>
          <type>FILE *</type>
          <declname>fileptr</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dinit</declname>
        </param>
        <param>
          <type>long</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>long</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>long</type>
          <declname>m3</declname>
        </param>
        <param>
          <type>double ****</type>
          <declname>d3aray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="openfdem_commom.c" line="536" column="6" bodyfile="openfdem_commom.c" bodystart="536" bodyend="649"/>
      </memberdef>
      <memberdef kind="function" id="openfdem__commom_8c_1a8e2f570e1687daa1a3a6915727d7fae8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parse_1D_int_array</definition>
        <argsstring>(FILE *fileptr, long iinit, long m1, long readtitle1, long **i1aray)</argsstring>
        <name>parse_1D_int_array</name>
        <param>
          <type>FILE *</type>
          <declname>fileptr</declname>
        </param>
        <param>
          <type>long</type>
          <declname>iinit</declname>
        </param>
        <param>
          <type>long</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>long</type>
          <declname>readtitle1</declname>
        </param>
        <param>
          <type>long **</type>
          <declname>i1aray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="openfdem_commom.c" line="651" column="6" bodyfile="openfdem_commom.c" bodystart="651" bodyend="674"/>
      </memberdef>
      <memberdef kind="function" id="openfdem__commom_8c_1a04cc2f06f64ba1d93a2c477772439e4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parse_2D_int_array</definition>
        <argsstring>(FILE *fileptr, long iinit, long m1, long m2, long how, long readtitle1, long readtitle2, long ***i2aray)</argsstring>
        <name>parse_2D_int_array</name>
        <param>
          <type>FILE *</type>
          <declname>fileptr</declname>
        </param>
        <param>
          <type>long</type>
          <declname>iinit</declname>
        </param>
        <param>
          <type>long</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>long</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>long</type>
          <declname>how</declname>
        </param>
        <param>
          <type>long</type>
          <declname>readtitle1</declname>
        </param>
        <param>
          <type>long</type>
          <declname>readtitle2</declname>
        </param>
        <param>
          <type>long ***</type>
          <declname>i2aray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="openfdem_commom.c" line="675" column="6" bodyfile="openfdem_commom.c" bodystart="675" bodyend="722"/>
      </memberdef>
      <memberdef kind="function" id="openfdem__commom_8c_1a08956be0fb422d6ef15e2d0d20a38664" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void get_vector_unit</definition>
        <argsstring>(double *e1x, double *e1y, double rx, double ry)</argsstring>
        <name>get_vector_unit</name>
        <param>
          <type>double *</type>
          <declname>e1x</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>e1y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rx</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="openfdem_commom.c" line="724" column="6" bodyfile="openfdem_commom.c" bodystart="724" bodyend="730"/>
      </memberdef>
      <memberdef kind="function" id="openfdem__commom_8c_1a41bdfd2cdd985bb1accdb397d85623c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void get_vector_rotated</definition>
        <argsstring>(double *e1x, double *e1y, double e2x, double e2y)</argsstring>
        <name>get_vector_rotated</name>
        <param>
          <type>double *</type>
          <declname>e1x</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>e1y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>e2x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>e2y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="openfdem_commom.c" line="732" column="6" bodyfile="openfdem_commom.c" bodystart="732" bodyend="736"/>
      </memberdef>
      <memberdef kind="function" id="openfdem__commom_8c_1af173a450ad4cc4ab481cdd7baa9359eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void get_vector_global_to_local</definition>
        <argsstring>(double *u, double *v, double rx, double ry, double e1x, double e1y, double e2x, double e2y)</argsstring>
        <name>get_vector_global_to_local</name>
        <param>
          <type>double *</type>
          <declname>u</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rx</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ry</declname>
        </param>
        <param>
          <type>double</type>
          <declname>e1x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>e1y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>e2x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>e2y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="openfdem_commom.c" line="738" column="6" bodyfile="openfdem_commom.c" bodystart="738" bodyend="742"/>
      </memberdef>
      <memberdef kind="function" id="openfdem__commom_8c_1afbc0dc4cedcde3fb407cfacfd199750b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void getsig</definition>
        <argsstring>(int signum)</argsstring>
        <name>getsig</name>
        <param>
          <type>int</type>
          <declname>signum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="openfdem_commom.c" line="745" column="6" bodyfile="openfdem_commom.c" bodystart="745" bodyend="748"/>
      </memberdef>
      <memberdef kind="function" id="openfdem__commom_8c_1aace1609bd879754ae48beb0548d70625" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int openfdem_run_usr_break</definition>
        <argsstring>(double CurrentTime, long NowStep, long TotalStep)</argsstring>
        <name>openfdem_run_usr_break</name>
        <param>
          <type>double</type>
          <declname>CurrentTime</declname>
        </param>
        <param>
          <type>long</type>
          <declname>NowStep</declname>
        </param>
        <param>
          <type>long</type>
          <declname>TotalStep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="openfdem_commom.c" line="750" column="5" bodyfile="openfdem_commom.c" bodystart="750" bodyend="801"/>
      </memberdef>
      <memberdef kind="function" id="openfdem__commom_8c_1af7f1202c194c5b481913c1462d0d78e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long get_line_current_position</definition>
        <argsstring>(FILE *fileptr)</argsstring>
        <name>get_line_current_position</name>
        <param>
          <type>FILE *</type>
          <declname>fileptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="openfdem_commom.c" line="804" column="6" bodyfile="openfdem_commom.c" bodystart="804" bodyend="823"/>
      </memberdef>
      <memberdef kind="function" id="openfdem__commom_8c_1afa541b0a975a6787ce700def1480026c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void create_result_store_folder</definition>
        <argsstring>(char *Result_store_folder)</argsstring>
        <name>create_result_store_folder</name>
        <param>
          <type>char *</type>
          <declname>Result_store_folder</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="openfdem_commom.c" line="825" column="6" bodyfile="openfdem_commom.c" bodystart="825" bodyend="835"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="openfdem__commom_8h" kindref="compound">openfdem_commom.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;direct.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../solid/solid_mechanics_cohesive/openfdem_solid_cohesive.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>Arrays<sp/>input<sp/>output<sp/>and<sp/>allocation<sp/>routines<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="openfdem__commom_8c_1a953729d06f7e62d095e1a9ebdc6bb149" kindref="member">get_filename_no_path</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>c1,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>c2)<sp/><sp/></highlight><highlight class="comment">/*<sp/>copy<sp/>no<sp/>extension<sp/>and<sp/>path<sp/>C:/usr/files/example.fdem-&gt;example<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>ib,<sp/>ie,<sp/>ilen;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>ilen<sp/>=<sp/>299;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>300;<sp/>i++)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c2[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{<sp/>ilen<sp/>=<sp/>i<sp/>-<sp/>1;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}<sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>length<sp/>of<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>ib<sp/>=<sp/>0;<sp/><sp/>ie<sp/>=<sp/>ilen;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>ilen;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c2[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)<sp/>{<sp/>ie<sp/>=<sp/>i;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>&apos;.&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>ilen;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c2[i]<sp/>==<sp/>92)<sp/>|<sp/>(c2[i]<sp/>==<sp/>47))<sp/>{<sp/>ib<sp/>=<sp/>i<sp/>+<sp/>1;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}<sp/>}<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>&apos;\&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>ib;<sp/>i<sp/>&lt;<sp/>ie;<sp/>i++)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c1[j]<sp/>=<sp/>c2[i];</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j++;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>c1[j]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="openfdem__commom_8c_1a2cbe3020e43def7bdbf2cbb57eba43bb" kindref="member">get_path</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>c1,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>c2)<sp/><sp/></highlight><highlight class="comment">/*<sp/>copy<sp/>folder<sp/>path<sp/>of<sp/>the<sp/>file<sp/><sp/>C:/usr/files/example.fdem-&gt;C:/usr/files<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>ib,<sp/>ilen;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>ilen<sp/>=<sp/>299;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>300;<sp/>i++)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c2[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{<sp/>ilen<sp/>=<sp/>i<sp/>-<sp/>1;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}<sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>length<sp/>of<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>ib<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>ilen;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c2[i]<sp/>==<sp/>92)<sp/>|<sp/>(c2[i]<sp/>==<sp/>47))<sp/>{<sp/>ib<sp/>=<sp/>i;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}<sp/>}<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>&apos;\&apos;<sp/>or<sp/>&apos;/&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ib;<sp/>i++)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c1[j]<sp/>=<sp/>c2[i];</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j++;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>c1[j]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="openfdem__commom_8c_1ad222eb58d23c97b1efd0fb5857d2a685" kindref="member">get_filename_no_suffix</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>c1,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>c2)<sp/><sp/></highlight><highlight class="comment">/*<sp/>copy<sp/>filename<sp/>without<sp/>suffix<sp/>C:/usr/files/example.fdem-&gt;C:/usr/files/example<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal">{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>ie,<sp/>ilen;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>ilen<sp/>=<sp/>299;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>300;<sp/>i++)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c2[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{<sp/>ilen<sp/>=<sp/>i<sp/>-<sp/>1;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}<sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>length<sp/>of<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>ie<sp/>=<sp/>ilen;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>ilen;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c2[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)<sp/>{<sp/>ie<sp/>=<sp/>i;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>&apos;.&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ie;<sp/>i++)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c1[j]<sp/>=<sp/>c2[i];</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j++;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>c1[j]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="openfdem__commom_8c_1aeb63f42627aa7844f127e016eff2cb0e" kindref="member">get_suffix</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>c1,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>c2)<sp/><sp/></highlight><highlight class="comment">/*<sp/>copy<sp/><sp/>suffix<sp/>C:/usr/files/example.fdem-&gt;fdem*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal">{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>ie,<sp/>ilen;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>ilen<sp/>=<sp/>299;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>300;<sp/>i++)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c2[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{<sp/>ilen<sp/>=<sp/>i;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}<sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>length<sp/>of<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>ie<sp/>=<sp/>ilen;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>ilen;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c2[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)<sp/>{<sp/>ie<sp/>=<sp/>i<sp/>+<sp/>1;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>&apos;.&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>ie;<sp/>i<sp/>&lt;<sp/>ilen;<sp/>i++)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c1[j]<sp/>=<sp/>c2[i];</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j++;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>c1[j]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="openfdem__commom_8c_1ae99538b7a858821ae21d6ea432192455" kindref="member">strip_ext</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fname)<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>copy<sp/>fdem.geo<sp/>-&gt;<sp/>fdem<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal">{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>end<sp/>=<sp/>fname<sp/>+<sp/>strlen(fname);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(end<sp/>&gt;<sp/>fname<sp/>&amp;&amp;<sp/>*end<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>*end<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>*end<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--end;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((end<sp/>&gt;<sp/>fname<sp/>&amp;&amp;<sp/>*end<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*(end<sp/>-<sp/>1)<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>*(end<sp/>-<sp/>1)<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*end<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="openfdem__commom_8c_1a6fa2ebf2818d694438596ef6beb65e96" kindref="member">parse_string</ref>(FILE*<sp/>InputFile,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>c1)<sp/><sp/></highlight><highlight class="comment">/*<sp/>copy<sp/><sp/>path<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>quoto_A,<sp/>quoto_B;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>fscanf(InputFile,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>%c%[^\&quot;\&apos;]%c&quot;</highlight><highlight class="normal">,<sp/>&amp;quoto_A,<sp/>c1,<sp/>&amp;quoto_B);</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/><ref refid="openfdem__commom_8c_1a9fb67a9b32c39c75beeb77d6f6ecdbf0" kindref="member">malloc_1D_double_array</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>m1)</highlight></codeline>
<codeline lineno="115"><highlight class="normal">{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>isize<sp/>=<sp/>m1<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(double);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isize<sp/>&lt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="openfdem__commom_8h_1a7b9da6389c9fd8ae161aca291c470b5c" kindref="member">Double1DNull</ref>;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*)malloc(isize);</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/><ref refid="openfdem__commom_8c_1a8f14e1fb10db366742b22c28eb480c23" kindref="member">initialize_1D_double_array</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>m1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dini)</highlight></codeline>
<codeline lineno="122"><highlight class="normal">{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>p;<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>isize<sp/>=<sp/>m1<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(double);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isize<sp/>&lt;=<sp/>0)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="openfdem__commom_8h_1a7b9da6389c9fd8ae161aca291c470b5c" kindref="member">Double1DNull</ref>;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*)malloc(isize);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m1;<sp/>i++)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[i]<sp/>=<sp/>dini;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">**<sp/><ref refid="openfdem__commom_8c_1a775d41b3e9fccb53efa5ed050f9006a5" kindref="member">malloc_2D_double_array</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>m2,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>m1)</highlight></codeline>
<codeline lineno="135"><highlight class="normal">{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>isize,<sp/>i2;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>p1;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">**<sp/>p2;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>v1;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>isize<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*)<sp/>*<sp/>(m2<sp/>+<sp/>3)<sp/>+</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(double)<sp/>*<sp/>(m2<sp/>*<sp/>m1<sp/>+<sp/>3);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isize<sp/>&lt;=<sp/>0)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="openfdem__commom_8h_1a33a0b45fdf98646f43688c0e276ea58c" kindref="member">Double2DNull</ref>;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m2<sp/>*<sp/>m1<sp/>&lt;=<sp/>0)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="openfdem__commom_8h_1a33a0b45fdf98646f43688c0e276ea58c" kindref="member">Double2DNull</ref>;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>v1<sp/>=<sp/>malloc(isize);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>p2<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">**)v1;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>p1<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*)v1;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>p1<sp/>=<sp/>p1<sp/>+<sp/>((m2<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">**))<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i2<sp/>=<sp/>0;<sp/>i2<sp/>&lt;<sp/>m2;<sp/>i2++)</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p2[i2]<sp/>=<sp/>p1<sp/>+<sp/>i2<sp/>*<sp/>m1;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p2;</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">**<sp/><ref refid="openfdem__commom_8c_1a135d4d0bce0649a5fccdf6b70df4fc2a" kindref="member">initialize_2D_double_array</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>m2,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>m1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dini)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal">{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>isize,<sp/>i1,<sp/>i2;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">**<sp/>p2;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>isize<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*)<sp/>*<sp/>m2;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isize<sp/>&lt;=<sp/>0)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="openfdem__commom_8h_1a33a0b45fdf98646f43688c0e276ea58c" kindref="member">Double2DNull</ref>;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m2<sp/>*<sp/>m1<sp/>&lt;=<sp/>0)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="openfdem__commom_8h_1a33a0b45fdf98646f43688c0e276ea58c" kindref="member">Double2DNull</ref>;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>p2<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">**)malloc(isize);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i1<sp/>=<sp/>0;<sp/>i1<sp/>&lt;<sp/>m2;<sp/>i1++)</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p2[i1]<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>*<sp/>m1);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i1<sp/>=<sp/>0;<sp/>i1<sp/>&lt;<sp/>m2;<sp/>i1++)</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i2<sp/>=<sp/>0;<sp/>i2<sp/>&lt;<sp/>m1;<sp/>i2++)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p2[i1][i2]<sp/>=<sp/>dini;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p2;</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">***<sp/><ref refid="openfdem__commom_8c_1a7421b6d81d94fc5929920dc4bfc7836a" kindref="member">malloc_3D_double_array</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>m3,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>m2,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>m1)</highlight></codeline>
<codeline lineno="182"><highlight class="normal">{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>isize,<sp/>i2,<sp/>i3;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>p1b;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">**<sp/>p2b,<sp/>**<sp/>p2e,<sp/>**<sp/>p2;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">***<sp/>p3b,<sp/>***<sp/>p3e;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>v1;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>isize<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">**)<sp/>*<sp/>(m3<sp/>+<sp/>3)<sp/>+</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*)<sp/>*<sp/>(m3<sp/>*<sp/>m2<sp/>+<sp/>3)<sp/>+</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(double)<sp/>*<sp/>(m3<sp/>*<sp/>m2<sp/>*<sp/>m1<sp/>+<sp/>3);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isize<sp/>&lt;=<sp/>0)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="openfdem__commom_8h_1a302a79e79b0ab226620f524e971e5bd3" kindref="member">Double3DNull</ref>;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m3<sp/>*<sp/>m2<sp/>*<sp/>m1<sp/>&lt;=<sp/>0)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="openfdem__commom_8h_1a302a79e79b0ab226620f524e971e5bd3" kindref="member">Double3DNull</ref>;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>v1<sp/>=<sp/>malloc(isize);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>p3b<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">***)v1;<sp/>p3e<sp/>=<sp/>p3b<sp/>+<sp/>m3<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>p2b<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">**)p3e;<sp/>p2e<sp/>=<sp/>p2b<sp/>+<sp/>m3<sp/>*<sp/>m2<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>p1b<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*)p2e;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>p2<sp/>=<sp/>p2b;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i3<sp/>=<sp/>0;<sp/>i3<sp/>&lt;<sp/>m3;<sp/>i3++)</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p2<sp/>=<sp/>p2b<sp/>+<sp/>i3<sp/>*<sp/>m2;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3b[i3]<sp/>=<sp/>p2;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i2<sp/>=<sp/>0;<sp/>i2<sp/>&lt;<sp/>m2;<sp/>i2++)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p2[i2]<sp/>=<sp/>p1b<sp/>+<sp/>i3<sp/>*<sp/>m2<sp/>*<sp/>m1<sp/>+<sp/>i2<sp/>*<sp/>m1;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p3b;</highlight></codeline>
<codeline lineno="209"><highlight class="normal">}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">***<sp/><ref refid="openfdem__commom_8c_1a17dbcbf772a2abfab531a7b5232bbfcd" kindref="member">initialize_3D_double_array</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>m3,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>m2,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>m1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dini)</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal">{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>isize,<sp/>i1,<sp/>i2,<sp/>i3;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>p1b;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">**<sp/>p2b,<sp/>**<sp/>p2e,<sp/>**<sp/>p2;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">***<sp/>p3b,<sp/>***<sp/>p3e;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>v1;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>isize<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">**)<sp/>*<sp/>(m3<sp/>+<sp/>3)<sp/>+</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*)<sp/>*<sp/>(m3<sp/>*<sp/>m2<sp/>+<sp/>3)<sp/>+</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(double)<sp/>*<sp/>(m3<sp/>*<sp/>m2<sp/>*<sp/>m1<sp/>+<sp/>3);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isize<sp/>&lt;=<sp/>0)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="openfdem__commom_8h_1a302a79e79b0ab226620f524e971e5bd3" kindref="member">Double3DNull</ref>;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m3<sp/>*<sp/>m2<sp/>*<sp/>m1<sp/>&lt;=<sp/>0)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="openfdem__commom_8h_1a302a79e79b0ab226620f524e971e5bd3" kindref="member">Double3DNull</ref>;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>v1<sp/>=<sp/>malloc(isize);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>p3b<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">***)v1;<sp/>p3e<sp/>=<sp/>p3b<sp/>+<sp/>m3<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>p2b<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">**)p3e;<sp/>p2e<sp/>=<sp/>p2b<sp/>+<sp/>m3<sp/>*<sp/>m2<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>p1b<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*)p2e;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>p2<sp/>=<sp/>p2b;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i3<sp/>=<sp/>0;<sp/>i3<sp/>&lt;<sp/>m3;<sp/>i3++)</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p2<sp/>=<sp/>p2b<sp/>+<sp/>i3<sp/>*<sp/>m2;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3b[i3]<sp/>=<sp/>p2;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i2<sp/>=<sp/>0;<sp/>i2<sp/>&lt;<sp/>m2;<sp/>i2++)</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p2[i2]<sp/>=<sp/>p1b<sp/>+<sp/>i3<sp/>*<sp/>m2<sp/>*<sp/>m1<sp/>+<sp/>i2<sp/>*<sp/>m1;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i3<sp/>=<sp/>0;<sp/>i3<sp/>&lt;<sp/>m3;<sp/>i3++)</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i2<sp/>=<sp/>0;<sp/>i2<sp/>&lt;<sp/>m2;<sp/>i2++)</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i1<sp/>=<sp/>0;<sp/>i1<sp/>&lt;<sp/>m1;<sp/>i1++)</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3b[i3][i2][i1]<sp/>=<sp/>dini;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p3b;</highlight></codeline>
<codeline lineno="249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/><ref refid="openfdem__commom_8c_1aa0fd612d2737f61a0e4fb3ea9eac1152" kindref="member">malloc_1D_int_array</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>m1)</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal">{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>isize<sp/>=<sp/>m1<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(long);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isize<sp/>&lt;=<sp/>0)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="openfdem__commom_8h_1ae645df46a063f9058c909eaa025a5ce4" kindref="member">Int1DNull</ref>;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*)malloc(isize);</highlight></codeline>
<codeline lineno="257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/><ref refid="openfdem__commom_8c_1a949156108abf19843c73d35073f3b93b" kindref="member">initialize_1D_int_array</ref>(<ref refid="openfdem__struct_8h_1a91adff1610bdf681555a8f2e330dc963" kindref="member">Int</ref><sp/>m1,<sp/><ref refid="openfdem__struct_8h_1a91adff1610bdf681555a8f2e330dc963" kindref="member">Int</ref><sp/>iini)</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal">{<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>isize<sp/>=<sp/>m1<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(long);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/>pt,<sp/>i;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isize<sp/>&lt;=<sp/>0)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="openfdem__commom_8h_1ae645df46a063f9058c909eaa025a5ce4" kindref="member">Int1DNull</ref>;</highlight></codeline>
<codeline lineno="264"><highlight class="normal">pt<sp/>=<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*)malloc(isize);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>pt[i]<sp/>=<sp/>iini;</highlight></codeline>
<codeline lineno="267"><highlight class="normal">}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pt;</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><ref refid="openfdem__struct_8h_1a26ff0e0ab71ea1ed8bac401c56ed2242" kindref="member">UInt</ref>*<sp/><ref refid="openfdem__commom_8c_1a2c972d77af801a1f8cea61f684c7b515" kindref="member">realloc_UInt_array</ref>(<ref refid="openfdem__struct_8h_1a26ff0e0ab71ea1ed8bac401c56ed2242" kindref="member">UInt</ref>*<sp/>array,<sp/><ref refid="openfdem__struct_8h_1a26ff0e0ab71ea1ed8bac401c56ed2242" kindref="member">UInt</ref><sp/>size)</highlight></codeline>
<codeline lineno="272"><highlight class="normal">{<sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/>array<sp/>=<sp/>(<ref refid="openfdem__struct_8h_1a26ff0e0ab71ea1ed8bac401c56ed2242" kindref="member">UInt</ref>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="openfdem__struct_8h_1a26ff0e0ab71ea1ed8bac401c56ed2242" kindref="member">UInt</ref>)<sp/>*<sp/>(size<sp/>+<sp/>1));<sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array<sp/>=<sp/>(<ref refid="openfdem__struct_8h_1a26ff0e0ab71ea1ed8bac401c56ed2242" kindref="member">UInt</ref>*)realloc(array,<sp/>(size<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="openfdem__struct_8h_1a26ff0e0ab71ea1ed8bac401c56ed2242" kindref="member">UInt</ref>));<sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>array;</highlight></codeline>
<codeline lineno="277"><highlight class="normal">}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><ref refid="openfdem__commom_8c_1a7b41dba21c77adeae6dd90f7cc038066" kindref="member">realloc_Int_array</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>array,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="280"><highlight class="normal">{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>*<sp/>(size<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)realloc(array,<sp/>(size<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int));</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>array;</highlight></codeline>
<codeline lineno="289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><ref refid="openfdem__struct_8h_1a26ff0e0ab71ea1ed8bac401c56ed2242" kindref="member">UInt</ref>*<sp/><ref refid="openfdem__commom_8c_1a3ea49b16ac7c8f615eae074a829494fe" kindref="member">initialize_1D_UInt_array</ref>(<ref refid="openfdem__struct_8h_1a26ff0e0ab71ea1ed8bac401c56ed2242" kindref="member">UInt</ref><sp/>m1,<sp/><ref refid="openfdem__struct_8h_1a26ff0e0ab71ea1ed8bac401c56ed2242" kindref="member">UInt</ref><sp/>iini)</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal">{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="openfdem__struct_8h_1a26ff0e0ab71ea1ed8bac401c56ed2242" kindref="member">UInt</ref><sp/>isize<sp/>=<sp/>m1<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="openfdem__struct_8h_1a26ff0e0ab71ea1ed8bac401c56ed2242" kindref="member">UInt</ref>);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="openfdem__struct_8h_1a26ff0e0ab71ea1ed8bac401c56ed2242" kindref="member">UInt</ref>*<sp/>pt,<sp/>i;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isize<sp/>&lt;=<sp/>0)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="298"><highlight class="normal">pt<sp/>=<sp/>(<ref refid="openfdem__struct_8h_1a26ff0e0ab71ea1ed8bac401c56ed2242" kindref="member">UInt</ref>*)malloc(isize);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>pt[i]<sp/>=<sp/>iini;</highlight></codeline>
<codeline lineno="301"><highlight class="normal">}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pt;</highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">**<sp/><ref refid="openfdem__commom_8c_1acb9b2b8f3672919f95a07c99e60c7fca" kindref="member">malloc_2D_int_array</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>m2,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>m1)</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal">{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>isize,<sp/>i2;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/>p1;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">**<sp/>p2;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>v1;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>isize<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*)<sp/>*<sp/>(m2<sp/>+<sp/>3)<sp/>+</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(long)<sp/>*<sp/>(m2<sp/>*<sp/>m1<sp/>+<sp/>3);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m2<sp/>*<sp/>m1<sp/>&lt;=<sp/>0)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="openfdem__commom_8h_1a880e86f6ad7544fd1005362977f9554e" kindref="member">Int2DNull</ref>;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isize<sp/>&lt;=<sp/>0)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="openfdem__commom_8h_1a880e86f6ad7544fd1005362977f9554e" kindref="member">Int2DNull</ref>;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>v1<sp/>=<sp/>malloc(isize);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>p2<sp/>=<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">**)v1;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>p1<sp/>=<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*)v1;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>p1<sp/>=<sp/>p1<sp/>+<sp/>((m2<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">**))<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i2<sp/>=<sp/>0;<sp/>i2<sp/>&lt;<sp/>m2;<sp/>i2++)</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p2[i2]<sp/>=<sp/>p1<sp/>+<sp/>i2<sp/>*<sp/>m1;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p2;</highlight></codeline>
<codeline lineno="326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">**<sp/><ref refid="openfdem__commom_8c_1aed43181f659652b1528b8d258d7ea0cf" kindref="member">initialize_2D_int_array</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>m2,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>m1,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>iini)<sp/></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal">{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>isize,<sp/>i1,<sp/>i2;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">**<sp/>ptr2;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>isize<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*)<sp/>*<sp/>m2;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m2<sp/>*<sp/>m1<sp/>&lt;=<sp/>0)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="openfdem__commom_8h_1a880e86f6ad7544fd1005362977f9554e" kindref="member">Int2DNull</ref>;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isize<sp/>&lt;=<sp/>0)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="openfdem__commom_8h_1a880e86f6ad7544fd1005362977f9554e" kindref="member">Int2DNull</ref>;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr2<sp/>=<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">**)malloc(isize);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ptr1<sp/>=<sp/>(long*)(ptr2<sp/>+<sp/>m2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i1<sp/>=<sp/>0;<sp/>i1<sp/>&lt;<sp/>m2;<sp/>i1++)</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr2[i1]<sp/>=<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>*<sp/>m1);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i1<sp/>=<sp/>0;<sp/>i1<sp/>&lt;<sp/>m2;<sp/>i1++)</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i2<sp/>=<sp/>0;<sp/>i2<sp/>&lt;<sp/>m1;<sp/>i2++)</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr2[i1][i2]<sp/>=<sp/>iini;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(ptr2);</highlight></codeline>
<codeline lineno="349"><highlight class="normal">}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><ref refid="structof__tensor" kindref="compound">of_tensor</ref>*<sp/><ref refid="openfdem__commom_8c_1a947d1a55deeab18a67ecfd434e44f387" kindref="member">initialize_1D_tensor</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>double_ini)<sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>array<sp/>of<sp/>tensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal">{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isize,<sp/>i;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structof__tensor" kindref="compound">of_tensor</ref>*<sp/>ptr;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>isize<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structof__tensor" kindref="compound">of_tensor</ref>)<sp/>*<sp/>size;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isize<sp/>&lt;=<sp/>0)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>(<ref refid="structof__tensor" kindref="compound">of_tensor</ref>*)malloc(isize);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr)</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>i++)</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr[i].<ref refid="structof__tensor_1a7e65ab819e0717c931d8e052b6f4976c" kindref="member">xx</ref><sp/>=<sp/>double_ini;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr[i].<ref refid="structof__tensor_1a124420f8d64e46bf72f288c1a8852601" kindref="member">xy</ref><sp/>=<sp/>double_ini;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr[i].<ref refid="structof__tensor_1ac0e43764b95093f36600dcc0f92d55bd" kindref="member">yx</ref><sp/>=<sp/>double_ini;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr[i].<ref refid="structof__tensor_1a2bdf6fba07771d98b9558f145295d559" kindref="member">yy</ref><sp/>=<sp/>double_ini;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr[i].<ref refid="structof__tensor_1a7422b6b5ccd2bd88f9db814e869550f9" kindref="member">zz</ref><sp/>=<sp/>double_ini;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(ptr);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal">}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><ref refid="structof__tensor" kindref="compound">of_tensor</ref>*<sp/><ref refid="openfdem__commom_8c_1a209a0c132db108f6d825d6cd9909480e" kindref="member">parse_1D_tensor</ref>(FILE*<sp/>fileptr,<sp/><ref refid="openfdem__struct_8h_1a26ff0e0ab71ea1ed8bac401c56ed2242" kindref="member">UInt</ref><sp/>size,<sp/><ref refid="openfdem__struct_8h_1a060b837c3b4486ee35317744156f3da2" kindref="member">Real</ref><sp/>double_ini)<sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>array<sp/>of<sp/>tensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal">{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isize,<sp/>i;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dnum;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structof__tensor" kindref="compound">of_tensor</ref>*<sp/>ptr;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>isize<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structof__tensor" kindref="compound">of_tensor</ref>)<sp/>*<sp/>size;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isize<sp/>&lt;=<sp/>0)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>(<ref refid="structof__tensor" kindref="compound">of_tensor</ref>*)malloc(isize);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr)</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>i++)</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr[i].<ref refid="structof__tensor_1a7e65ab819e0717c931d8e052b6f4976c" kindref="member">xx</ref><sp/>=<sp/>double_ini;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr[i].<ref refid="structof__tensor_1a124420f8d64e46bf72f288c1a8852601" kindref="member">xy</ref><sp/>=<sp/>double_ini;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr[i].<ref refid="structof__tensor_1ac0e43764b95093f36600dcc0f92d55bd" kindref="member">yx</ref><sp/>=<sp/>double_ini;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr[i].<ref refid="structof__tensor_1a2bdf6fba07771d98b9558f145295d559" kindref="member">yy</ref><sp/>=<sp/>double_ini;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr[i].<ref refid="structof__tensor_1a7422b6b5ccd2bd88f9db814e869550f9" kindref="member">zz</ref><sp/>=<sp/>double_ini;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="openfdem__message_8h_1ab6f5e66570130d1825298ace278b30ee" kindref="member">Parse_double</ref>(fileptr,<sp/>&amp;dnum);<sp/><sp/><sp/></highlight><highlight class="comment">//parse<sp/>xx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>i++)</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr[i].<ref refid="structof__tensor_1a7e65ab819e0717c931d8e052b6f4976c" kindref="member">xx</ref><sp/>=<sp/>dnum;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="openfdem__message_8h_1ab6f5e66570130d1825298ace278b30ee" kindref="member">Parse_double</ref>(fileptr,<sp/>&amp;dnum);<sp/><sp/></highlight><highlight class="comment">//parse<sp/>xy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>i++)</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr[i].<ref refid="structof__tensor_1a124420f8d64e46bf72f288c1a8852601" kindref="member">xy</ref><sp/>=<sp/>dnum;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr[i].<ref refid="structof__tensor_1ac0e43764b95093f36600dcc0f92d55bd" kindref="member">yx</ref><sp/>=<sp/>dnum;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="openfdem__message_8h_1ab6f5e66570130d1825298ace278b30ee" kindref="member">Parse_double</ref>(fileptr,<sp/>&amp;dnum);<sp/><sp/><sp/></highlight><highlight class="comment">//parse<sp/>yy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>i++)</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr[i].<ref refid="structof__tensor_1a2bdf6fba07771d98b9558f145295d559" kindref="member">yy</ref><sp/>=<sp/>dnum;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="openfdem__message_8h_1ab6f5e66570130d1825298ace278b30ee" kindref="member">Parse_double</ref>(fileptr,<sp/>&amp;dnum);<sp/><sp/><sp/></highlight><highlight class="comment">//parse<sp/>zz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>i++)</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr[i].<ref refid="structof__tensor_1a7422b6b5ccd2bd88f9db814e869550f9" kindref="member">zz</ref><sp/>=<sp/>dnum;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(ptr);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal">}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="openfdem__commom_8c_1a0a90dbba82635af5da1ef37ed53adccb" kindref="member">parse_1D_double_array</ref>(FILE*<sp/>fileptr,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dinit,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>max_size,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>actual_size,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">**<sp/>d1aray)</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal">{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i1,<sp/>n1;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dnum;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>d1<sp/>=<sp/>*d1aray;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>n1<sp/>=<sp/>actual_size;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d1<sp/>==<sp/><ref refid="openfdem__commom_8h_1a7b9da6389c9fd8ae161aca291c470b5c" kindref="member">Double1DNull</ref>)<sp/>{<sp/>d1<sp/>=<sp/><ref refid="openfdem__commom_8c_1a9fb67a9b32c39c75beeb77d6f6ecdbf0" kindref="member">malloc_1D_double_array</ref>(max_size);<sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>*d1aray<sp/>=<sp/>d1;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d1<sp/>!=<sp/><ref refid="openfdem__commom_8h_1a7b9da6389c9fd8ae161aca291c470b5c" kindref="member">Double1DNull</ref>)</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i1<sp/>=<sp/>0;<sp/>i1<sp/>&lt;<sp/>max_size;<sp/>i1++)</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d1[i1]<sp/>=<sp/>dinit;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fileptr<sp/>!=<sp/><ref refid="openfdem__commom_8h_1ace5d16511ddcfcce938c2a0e577eaa27" kindref="member">FileNull</ref>)</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/></highlight><highlight class="comment">//Parse_int(fileptr,<sp/>&amp;n1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i1<sp/>=<sp/>0;<sp/>i1<sp/>&lt;<sp/>n1;<sp/>i1++)</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="openfdem__message_8h_1ab6f5e66570130d1825298ace278b30ee" kindref="member">Parse_double</ref>(fileptr,<sp/>&amp;dnum);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d1[i1]<sp/>=<sp/>dnum;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="openfdem__commom_8c_1ab96946f187e9d673ae894f7d5de3f34f" kindref="member">NULL_vector</ref>(<ref refid="structof__vector" kindref="compound">of_vector</ref>*<sp/>d1aray)</highlight></codeline>
<codeline lineno="442"><highlight class="normal">{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>d1aray-&gt;<ref refid="structof__vector_1ac2e288ebffee7f8ca19c46021f4d38f0" kindref="member">x</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>d1aray-&gt;<ref refid="structof__vector_1a18279dd4d4460f2130f7a45358c14ffa" kindref="member">y</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="445"><highlight class="normal">}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="openfdem__commom_8c_1a40c0b3bf8e49a1f4384b6e09fa394f68" kindref="member">parse_vector</ref>(FILE*<sp/>fileptr,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dinit,<sp/><ref refid="structof__vector" kindref="compound">of_vector</ref>*<sp/>d1aray)</highlight></codeline>
<codeline lineno="448"><highlight class="normal">{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dnum;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>d1aray-&gt;<ref refid="structof__vector_1ac2e288ebffee7f8ca19c46021f4d38f0" kindref="member">x</ref><sp/>=<sp/>dinit;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>d1aray-&gt;<ref refid="structof__vector_1a18279dd4d4460f2130f7a45358c14ffa" kindref="member">y</ref><sp/>=<sp/>dinit;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fileptr<sp/>!=<sp/><ref refid="openfdem__commom_8h_1ace5d16511ddcfcce938c2a0e577eaa27" kindref="member">FileNull</ref>)</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="openfdem__message_8h_1ab6f5e66570130d1825298ace278b30ee" kindref="member">Parse_double</ref>(fileptr,<sp/>&amp;dnum);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d1aray-&gt;<ref refid="structof__vector_1ac2e288ebffee7f8ca19c46021f4d38f0" kindref="member">x</ref><sp/>=<sp/>dnum;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="openfdem__message_8h_1ab6f5e66570130d1825298ace278b30ee" kindref="member">Parse_double</ref>(fileptr,<sp/>&amp;dnum);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d1aray-&gt;<ref refid="structof__vector_1a18279dd4d4460f2130f7a45358c14ffa" kindref="member">y</ref><sp/>=<sp/>dnum;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal">}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="openfdem__commom_8c_1aad351edf42fca5614e7ad3a7b9152910" kindref="member">parse_1D_vector</ref>(FILE*<sp/>fileptr,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dinit,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>max_size,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>actual_size,<sp/><ref refid="structof__vector" kindref="compound">of_vector</ref>**<sp/>d1aray)</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal">{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i,<sp/>n<sp/>=<sp/>actual_size;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dnum;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structof__vector" kindref="compound">of_vector</ref>*<sp/>d1<sp/>=<sp/>*d1aray;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d1<sp/>==<sp/>(<ref refid="structof__vector" kindref="compound">of_vector</ref>*)NULL)<sp/>{<sp/>d1<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structof__vector" kindref="compound">of_vector</ref>)<sp/>*<sp/>(max_size));<sp/>}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>*d1aray<sp/>=<sp/>d1;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d1<sp/>!=<sp/>(<ref refid="structof__vector" kindref="compound">of_vector</ref>*)NULL)</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>max_size;<sp/>i++)</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d1[i].<ref refid="structof__vector_1ac2e288ebffee7f8ca19c46021f4d38f0" kindref="member">x</ref><sp/>=<sp/>dinit;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d1[i].<ref refid="structof__vector_1a18279dd4d4460f2130f7a45358c14ffa" kindref="member">y</ref><sp/>=<sp/>dinit;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fileptr<sp/>!=<sp/><ref refid="openfdem__commom_8h_1ace5d16511ddcfcce938c2a0e577eaa27" kindref="member">FileNull</ref>)</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="openfdem__message_8h_1ab6f5e66570130d1825298ace278b30ee" kindref="member">Parse_double</ref>(fileptr,<sp/>&amp;dnum);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d1[i].<ref refid="structof__vector_1ac2e288ebffee7f8ca19c46021f4d38f0" kindref="member">x</ref><sp/>=<sp/>dnum;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="openfdem__message_8h_1ab6f5e66570130d1825298ace278b30ee" kindref="member">Parse_double</ref>(fileptr,<sp/>&amp;dnum);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d1[i].<ref refid="structof__vector_1a18279dd4d4460f2130f7a45358c14ffa" kindref="member">y</ref><sp/>=<sp/>dnum;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="487"><highlight class="normal">}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="openfdem__commom_8c_1acc215ce7f8b79ad68947fc96f4023bad" kindref="member">parse_2D_double_array</ref>(FILE*<sp/>fileptr,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dinit,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>m1,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>m2,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>how,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>readtitle1,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>readtitle2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">***<sp/>d2aray)</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal">{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i1,<sp/>i2,<sp/>n1,<sp/>n2,<sp/>howway;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dnum;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">**<sp/>d2<sp/>=<sp/>*d2aray;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>n1<sp/>=<sp/>readtitle1;<sp/>n2<sp/>=<sp/>readtitle2;<sp/>howway<sp/>=<sp/>how;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d2<sp/>==<sp/><ref refid="openfdem__commom_8h_1a33a0b45fdf98646f43688c0e276ea58c" kindref="member">Double2DNull</ref>)d2<sp/>=<sp/><ref refid="openfdem__commom_8c_1a775d41b3e9fccb53efa5ed050f9006a5" kindref="member">malloc_2D_double_array</ref>(m1,<sp/>m2);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>*d2aray<sp/>=<sp/>d2;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d2<sp/>!=<sp/><ref refid="openfdem__commom_8h_1a33a0b45fdf98646f43688c0e276ea58c" kindref="member">Double2DNull</ref>)</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i1<sp/>=<sp/>0;<sp/>i1<sp/>&lt;<sp/>m1;<sp/>i1++)</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i2<sp/>=<sp/>0;<sp/>i2<sp/>&lt;<sp/>m2;<sp/>i2++)</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d2[i1][i2]<sp/>=<sp/>dinit;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fileptr<sp/>!=<sp/><ref refid="openfdem__commom_8h_1ace5d16511ddcfcce938c2a0e577eaa27" kindref="member">FileNull</ref>)</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(howway<sp/>==<sp/>12)</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i1<sp/>=<sp/>0;<sp/>i1<sp/>&lt;<sp/>n1;<sp/>i1++)</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i2<sp/>=<sp/>0;<sp/>i2<sp/>&lt;<sp/>n2;<sp/>i2++)</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="openfdem__message_8h_1ab6f5e66570130d1825298ace278b30ee" kindref="member">Parse_double</ref>(fileptr,<sp/>&amp;dnum);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parse<sp/>along<sp/>n2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d2[i1][i2]<sp/>=<sp/>dnum;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i2<sp/>=<sp/>0;<sp/>i2<sp/>&lt;<sp/>n2;<sp/>i2++)</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i1<sp/>=<sp/>0;<sp/>i1<sp/>&lt;<sp/>n1;<sp/>i1++)</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="openfdem__message_8h_1ab6f5e66570130d1825298ace278b30ee" kindref="member">Parse_double</ref>(fileptr,<sp/>&amp;dnum);<sp/><sp/></highlight><highlight class="comment">//parse<sp/>along<sp/>n1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d2[i1][i2]<sp/>=<sp/>dnum;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal">}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="openfdem__commom_8c_1a3659e4c055398b7237e6ce2e807a52cf" kindref="member">parse_3D_double_array</ref>(FILE*<sp/>fileptr,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dinit,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>m1,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>m2,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>m3,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">****<sp/>d3aray)</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal">{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i1,<sp/>i2,<sp/>i3,<sp/>n1,<sp/>n2,<sp/>n3,<sp/>how;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dnum;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">***<sp/>d3<sp/>=<sp/>*d3aray;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>n1<sp/>=<sp/>0;<sp/>n2<sp/>=<sp/>0;<sp/>n3<sp/>=<sp/>0;<sp/>how<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d3<sp/>==<sp/><ref refid="openfdem__commom_8h_1a302a79e79b0ab226620f524e971e5bd3" kindref="member">Double3DNull</ref>)d3<sp/>=<sp/><ref refid="openfdem__commom_8c_1a7421b6d81d94fc5929920dc4bfc7836a" kindref="member">malloc_3D_double_array</ref>(m1,<sp/>m2,<sp/>m3);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>*d3aray<sp/>=<sp/>d3;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d3<sp/>!=<sp/><ref refid="openfdem__commom_8h_1a302a79e79b0ab226620f524e971e5bd3" kindref="member">Double3DNull</ref>)</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i1<sp/>=<sp/>0;<sp/>i1<sp/>&lt;<sp/>m1;<sp/>i1++)</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i2<sp/>=<sp/>0;<sp/>i2<sp/>&lt;<sp/>m2;<sp/>i2++)</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i3<sp/>=<sp/>0;<sp/>i3<sp/>&lt;<sp/>m3;<sp/>i3++)</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d3[i1][i2][i3]<sp/>=<sp/>dinit;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fileptr<sp/>!=<sp/><ref refid="openfdem__commom_8h_1ace5d16511ddcfcce938c2a0e577eaa27" kindref="member">FileNull</ref>)</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="openfdem__message_8h_1aaadd709519253eb98630b90a9508bb78" kindref="member">Parse_int</ref>(fileptr,<sp/>&amp;how);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="openfdem__message_8h_1aaadd709519253eb98630b90a9508bb78" kindref="member">Parse_int</ref>(fileptr,<sp/>&amp;n1);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="openfdem__message_8h_1aaadd709519253eb98630b90a9508bb78" kindref="member">Parse_int</ref>(fileptr,<sp/>&amp;n2);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="openfdem__message_8h_1aaadd709519253eb98630b90a9508bb78" kindref="member">Parse_int</ref>(fileptr,<sp/>&amp;n3);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(how<sp/>==<sp/>123)</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i1<sp/>=<sp/>0;<sp/>i1<sp/>&lt;<sp/>n1;<sp/>i1++)</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i2<sp/>=<sp/>0;<sp/>i2<sp/>&lt;<sp/>n2;<sp/>i2++)</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i3<sp/>=<sp/>0;<sp/>i3<sp/>&lt;<sp/>n3;<sp/>i3++)</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="openfdem__message_8h_1ab6f5e66570130d1825298ace278b30ee" kindref="member">Parse_double</ref>(fileptr,<sp/>&amp;dnum);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d3[i1][i2][i3]<sp/>=<sp/>dnum;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(how<sp/>==<sp/>132)</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i1<sp/>=<sp/>0;<sp/>i1<sp/>&lt;<sp/>n1;<sp/>i1++)</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i3<sp/>=<sp/>0;<sp/>i3<sp/>&lt;<sp/>n3;<sp/>i3++)</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i2<sp/>=<sp/>0;<sp/>i2<sp/>&lt;<sp/>n2;<sp/>i2++)</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="openfdem__message_8h_1ab6f5e66570130d1825298ace278b30ee" kindref="member">Parse_double</ref>(fileptr,<sp/>&amp;dnum);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d3[i1][i2][i3]<sp/>=<sp/>dnum;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(how<sp/>==<sp/>213)</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i2<sp/>=<sp/>0;<sp/>i2<sp/>&lt;<sp/>n2;<sp/>i2++)</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i1<sp/>=<sp/>0;<sp/>i1<sp/>&lt;<sp/>n1;<sp/>i1++)</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i3<sp/>=<sp/>0;<sp/>i3<sp/>&lt;<sp/>n3;<sp/>i3++)</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="openfdem__message_8h_1ab6f5e66570130d1825298ace278b30ee" kindref="member">Parse_double</ref>(fileptr,<sp/>&amp;dnum);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d3[i1][i2][i3]<sp/>=<sp/>dnum;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(how<sp/>==<sp/>231)</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i2<sp/>=<sp/>0;<sp/>i2<sp/>&lt;<sp/>n2;<sp/>i2++)</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i3<sp/>=<sp/>0;<sp/>i3<sp/>&lt;<sp/>n3;<sp/>i3++)</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i1<sp/>=<sp/>0;<sp/>i1<sp/>&lt;<sp/>n1;<sp/>i1++)</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="openfdem__message_8h_1ab6f5e66570130d1825298ace278b30ee" kindref="member">Parse_double</ref>(fileptr,<sp/>&amp;dnum);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d3[i1][i2][i3]<sp/>=<sp/>dnum;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(how<sp/>==<sp/>312)</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i3<sp/>=<sp/>0;<sp/>i3<sp/>&lt;<sp/>n3;<sp/>i3++)</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i1<sp/>=<sp/>0;<sp/>i1<sp/>&lt;<sp/>n1;<sp/>i1++)</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i2<sp/>=<sp/>0;<sp/>i2<sp/>&lt;<sp/>n2;<sp/>i2++)</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="openfdem__message_8h_1ab6f5e66570130d1825298ace278b30ee" kindref="member">Parse_double</ref>(fileptr,<sp/>&amp;dnum);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d3[i1][i2][i3]<sp/>=<sp/>dnum;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(how<sp/>==<sp/>321)</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i3<sp/>=<sp/>0;<sp/>i3<sp/>&lt;<sp/>n3;<sp/>i3++)</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i2<sp/>=<sp/>0;<sp/>i2<sp/>&lt;<sp/>n2;<sp/>i2++)</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i1<sp/>=<sp/>0;<sp/>i1<sp/>&lt;<sp/>n1;<sp/>i1++)</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="openfdem__message_8h_1ab6f5e66570130d1825298ace278b30ee" kindref="member">Parse_double</ref>(fileptr,<sp/>&amp;dnum);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d3[i1][i2][i3]<sp/>=<sp/>dnum;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="649"><highlight class="normal">}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="openfdem__commom_8c_1a8e2f570e1687daa1a3a6915727d7fae8" kindref="member">parse_1D_int_array</ref>(FILE*<sp/>fileptr,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>iinit,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>m1,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>readtitle1,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">**<sp/>i1aray)</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal">{</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i1,<sp/>n1<sp/>=<sp/>readtitle1;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>inum;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/>i1a<sp/>=<sp/>*i1aray;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i1a<sp/>==<sp/><ref refid="openfdem__commom_8h_1ae645df46a063f9058c909eaa025a5ce4" kindref="member">Int1DNull</ref>)<sp/>{<sp/>i1a<sp/>=<sp/><ref refid="openfdem__commom_8c_1aa0fd612d2737f61a0e4fb3ea9eac1152" kindref="member">malloc_1D_int_array</ref>(m1);<sp/>}</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>*i1aray<sp/>=<sp/>i1a;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i1a<sp/>!=<sp/><ref refid="openfdem__commom_8h_1ae645df46a063f9058c909eaa025a5ce4" kindref="member">Int1DNull</ref>)</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i1<sp/>=<sp/>0;<sp/>i1<sp/>&lt;<sp/>m1;<sp/>i1++)</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i1a[i1]<sp/>=<sp/>iinit;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fileptr<sp/>!=<sp/><ref refid="openfdem__commom_8h_1ace5d16511ddcfcce938c2a0e577eaa27" kindref="member">FileNull</ref>)</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/></highlight><highlight class="comment">//Parse_int(fileptr,<sp/>&amp;n1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i1<sp/>=<sp/>0;<sp/>i1<sp/>&lt;<sp/>n1;<sp/>i1++)</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="openfdem__message_8h_1aaadd709519253eb98630b90a9508bb78" kindref="member">Parse_int</ref>(fileptr,<sp/>&amp;inum);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i1a[i1]<sp/>=<sp/>inum;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="674"><highlight class="normal">}</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="openfdem__commom_8c_1a04cc2f06f64ba1d93a2c477772439e4f" kindref="member">parse_2D_int_array</ref>(FILE*<sp/>fileptr,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>iinit,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>m1,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>m2,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>how,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>readtitle1,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>readtitle2,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">***<sp/>i2aray)</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal">{</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i1,<sp/>i2,<sp/>n1,<sp/>n2,<sp/>howay;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>inum;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">**<sp/>i2a<sp/>=<sp/>*i2aray;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>n1<sp/>=<sp/>readtitle1;<sp/>n2<sp/>=<sp/>readtitle2;<sp/>howay<sp/>=<sp/>how;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i2a<sp/>==<sp/><ref refid="openfdem__commom_8h_1a880e86f6ad7544fd1005362977f9554e" kindref="member">Int2DNull</ref>)</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2a<sp/>=<sp/><ref refid="openfdem__commom_8c_1acb9b2b8f3672919f95a07c99e60c7fca" kindref="member">malloc_2D_int_array</ref>(m1,<sp/>m2);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/>*i2aray<sp/>=<sp/>i2a;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i2a<sp/>!=<sp/><ref refid="openfdem__commom_8h_1a880e86f6ad7544fd1005362977f9554e" kindref="member">Int2DNull</ref>)</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i1<sp/>=<sp/>0;<sp/>i1<sp/>&lt;<sp/>m1;<sp/>i1++)</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i2<sp/>=<sp/>0;<sp/>i2<sp/>&lt;<sp/>m2;<sp/>i2++)</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2a[i1][i2]<sp/>=<sp/>iinit;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fileptr<sp/>!=<sp/><ref refid="openfdem__commom_8h_1ace5d16511ddcfcce938c2a0e577eaa27" kindref="member">FileNull</ref>)</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(howay<sp/>==<sp/>12)</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i1<sp/>=<sp/>0;<sp/>i1<sp/>&lt;<sp/>n1;<sp/>i1++)</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i2<sp/>=<sp/>0;<sp/>i2<sp/>&lt;<sp/>n2;<sp/>i2++)</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="openfdem__message_8h_1aaadd709519253eb98630b90a9508bb78" kindref="member">Parse_int</ref>(fileptr,<sp/>&amp;inum);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2a[i1][i2]<sp/>=<sp/>inum;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i2<sp/>=<sp/>0;<sp/>i2<sp/>&lt;<sp/>n2;<sp/>i2++)</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i1<sp/>=<sp/>0;<sp/>i1<sp/>&lt;<sp/>n1;<sp/>i1++)</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="openfdem__message_8h_1aaadd709519253eb98630b90a9508bb78" kindref="member">Parse_int</ref>(fileptr,<sp/>&amp;inum);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2a[i1][i2]<sp/>=<sp/>inum;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="722"><highlight class="normal">}</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="openfdem__commom_8c_1a08956be0fb422d6ef15e2d0d20a38664" kindref="member">get_vector_unit</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>e1x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>e1y,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ry)</highlight></codeline>
<codeline lineno="725"><highlight class="normal">{</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mag;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>mag<sp/>=<sp/>sqrt((rx<sp/>*<sp/>rx)<sp/>+<sp/>(ry<sp/>*<sp/>ry));</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/>*e1x<sp/>=<sp/>rx<sp/>/<sp/>mag;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>*e1y<sp/>=<sp/>ry<sp/>/<sp/>mag;</highlight></codeline>
<codeline lineno="730"><highlight class="normal">}</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="openfdem__commom_8c_1a41bdfd2cdd985bb1accdb397d85623c0" kindref="member">get_vector_rotated</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>e1x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>e1y,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>e2x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>e2y)</highlight></codeline>
<codeline lineno="733"><highlight class="normal">{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>*e1x<sp/>=<sp/>e2y;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>*e1y<sp/>=<sp/>-e2x;</highlight></codeline>
<codeline lineno="736"><highlight class="normal">}</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="openfdem__commom_8c_1af173a450ad4cc4ab481cdd7baa9359eb" kindref="member">get_vector_global_to_local</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>u,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>v,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ry,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>e1x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>e1y,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>e2x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>e2y)</highlight></codeline>
<codeline lineno="739"><highlight class="normal">{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>*u<sp/>=<sp/>(rx)<sp/>*<sp/>(e1x)+(ry)<sp/>*<sp/>(e1y);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>*v<sp/>=<sp/>(rx)<sp/>*<sp/>(e2x)+(ry)<sp/>*<sp/>(e2y);</highlight></codeline>
<codeline lineno="742"><highlight class="normal">}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="openfdem__commom_8c_1a9ddf075ceb350d249e41419efc16a644" kindref="member">TrapCtrlCBreak</ref><sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="openfdem__commom_8c_1afbc0dc4cedcde3fb407cfacfd199750b" kindref="member">getsig</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>signum)</highlight></codeline>
<codeline lineno="746"><highlight class="normal">{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="openfdem__commom_8c_1a9ddf075ceb350d249e41419efc16a644" kindref="member">TrapCtrlCBreak</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="748"><highlight class="normal">}</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="openfdem__commom_8c_1aace1609bd879754ae48beb0548d70625" kindref="member">openfdem_run_usr_break</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>CurrentTime,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>NowStep,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>TotalStep)</highlight></codeline>
<codeline lineno="751"><highlight class="normal">{</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE*<sp/>fileptr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*prev_fn)(int);</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>sw[4],<sp/>dtime[256];</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ttime<sp/>=<sp/>0.0;<sp/><sp/></highlight><highlight class="comment">/*<sp/>total<sp/>time<sp/>elapsed<sp/>in<sp/>ENABLC<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>runtime,<sp/>timebegin,<sp/>timeend;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secondid,<sp/>hourid,<sp/>minuteid,<sp/>actualsecondid,<sp/>actualhourid,<sp/>actualminuteid;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/>prev_fn<sp/>=<sp/>signal(SIGINT,<sp/><ref refid="openfdem__commom_8c_1afbc0dc4cedcde3fb407cfacfd199750b" kindref="member">getsig</ref>);<sp/><sp/></highlight><highlight class="comment">//read<sp/>signal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="openfdem__commom_8c_1a9ddf075ceb350d249e41419efc16a644" kindref="member">TrapCtrlCBreak</ref><sp/>==<sp/>0)<sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>ctrl-c<sp/>break<sp/>single<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fileptr<sp/>=<sp/>stdout;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timebegin<sp/>=<sp/><ref refid="openfdem__time_8c_1a1b07d3af954eb77a4117b65eebb4ddfc" kindref="member">openfdem_time_count</ref>();</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(fileptr,<sp/></highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Please<sp/>enter<sp/>sense<sp/>switch:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gets(sw);<sp/>sw[3]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeend<sp/>=<sp/><ref refid="openfdem__time_8c_1a1b07d3af954eb77a4117b65eebb4ddfc" kindref="member">openfdem_time_count</ref>();</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ttime<sp/>=<sp/>ttime<sp/>+<sp/>(timeend<sp/>-<sp/>timebegin);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>you<sp/>can<sp/>insert<sp/>some<sp/>statements<sp/>here<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strnicmp(sw,<sp/></highlight><highlight class="stringliteral">&quot;sw1&quot;</highlight><highlight class="normal">,<sp/>3)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strnicmp(sw,<sp/></highlight><highlight class="stringliteral">&quot;sw2&quot;</highlight><highlight class="normal">,<sp/>3)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>runtime<sp/>=<sp/><ref refid="openfdem__time_8c_1a1b07d3af954eb77a4117b65eebb4ddfc" kindref="member">openfdem_time_count</ref>();</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secondid<sp/>=<sp/>(int)runtime;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actualsecondid<sp/>=<sp/>((int)(runtime<sp/>-<sp/>ttime));</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hourid<sp/>=<sp/>secondid<sp/>/<sp/>3600;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actualhourid<sp/>=<sp/>actualsecondid<sp/>/<sp/>3600;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minuteid<sp/>=<sp/>(secondid<sp/>-<sp/>hourid<sp/>*<sp/>3600)<sp/>/<sp/>60;<sp/><sp/>actualminuteid<sp/>=<sp/>(actualsecondid<sp/>-<sp/>actualhourid<sp/>*<sp/>3600)<sp/>/<sp/>60;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fileptr<sp/>=<sp/>stdout;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(fileptr,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(fileptr,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>current<sp/>physi.<sp/>time<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>%18.7e\n&quot;</highlight><highlight class="normal">,<sp/>CurrentTime);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(fileptr,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>current<sp/><sp/>time<sp/><sp/>step<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>%18ld\n&quot;</highlight><highlight class="normal">,<sp/>NowStep);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(fileptr,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>total<sp/><sp/>elapsed<sp/><sp/>process<sp/><sp/>time<sp/><sp/><sp/>=<sp/>%8d<sp/>sec<sp/>(%5d<sp/>hrs<sp/>%2d<sp/>mins)\n&quot;</highlight><highlight class="normal">,<sp/>secondid,<sp/>hourid,<sp/>minuteid);</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(fileptr,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>total<sp/><sp/>elapsed<sp/><sp/>cpu<sp/><sp/>time<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>%8d<sp/>sec<sp/>(%5d<sp/>hrs<sp/>%2d<sp/>mins)\n&quot;</highlight><highlight class="normal">,<sp/>actualsecondid,<sp/>actualhourid,<sp/>actualminuteid);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secondid<sp/>=<sp/>(int)(runtime<sp/>*<sp/>((((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)TotalStep<sp/>-<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)NowStep))<sp/>/<sp/>((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)NowStep)));</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actualsecondid<sp/>=<sp/>(int)((runtime<sp/>-<sp/>ttime)<sp/>*<sp/>((((double)TotalStep<sp/>-<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)NowStep))<sp/>/<sp/>((double)NowStep)));</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hourid<sp/>=<sp/>secondid<sp/>/<sp/>3600;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actualhourid<sp/>=<sp/>actualsecondid<sp/>/<sp/>3600;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minuteid<sp/>=<sp/>(secondid<sp/>-<sp/>hourid<sp/>*<sp/>3600)<sp/>/<sp/>60;<sp/><sp/>actualminuteid<sp/>=<sp/>(actualsecondid<sp/>-<sp/>actualhourid<sp/>*<sp/>3600)<sp/>/<sp/>60;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(fileptr,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>estimated<sp/>remain<sp/>process<sp/>time<sp/><sp/><sp/>=<sp/>%8d<sp/>sec<sp/>(%5d<sp/>hrs<sp/>%2d<sp/>mins)\n&quot;</highlight><highlight class="normal">,<sp/>secondid,<sp/>hourid,<sp/>minuteid);</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(fileptr,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>estimated<sp/>remain<sp/>cpu<sp/>time<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>%8d<sp/>sec<sp/>(%5d<sp/>hrs<sp/>%2d<sp/>mins)\n&quot;</highlight><highlight class="normal">,<sp/>actualsecondid,<sp/>actualhourid,<sp/>actualminuteid);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="openfdem__time_8c_1a18ddb3dd432f2e2a091b9f6f94754e3b" kindref="member">openfdem_date_time</ref>(dtime);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n\n%s%s\n\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;continue<sp/>calculating...<sp/><sp/>@<sp/>&quot;</highlight><highlight class="normal">,<sp/>dtime);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="openfdem__commom_8c_1a9ddf075ceb350d249e41419efc16a644" kindref="member">TrapCtrlCBreak</ref><sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="801"><highlight class="normal">}</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Implemented<sp/>by<sp/>Zhou<sp/>LEI,<sp/>01/04/2010<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="openfdem__commom_8c_1af7f1202c194c5b481913c1462d0d78e5" kindref="member">get_line_current_position</ref>(FILE*<sp/>fileptr)</highlight></codeline>
<codeline lineno="805"><highlight class="normal">{</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>nline<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>iost;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ctemp[5560];</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/>fpos_t<sp/>curpos,<sp/>posp,<sp/>posn;</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>fgetpos(fileptr,<sp/>&amp;curpos);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/>rewind(fileptr);</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>fgetpos(fileptr,<sp/>&amp;posp);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iost<sp/>=<sp/>fgets(ctemp,<sp/>5560,<sp/>fileptr);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nline++;</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fgetpos(fileptr,<sp/>&amp;posn);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(posp<sp/>&lt;=<sp/>curpos<sp/>&amp;&amp;<sp/>curpos<sp/>&lt;=<sp/>posn)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>posp<sp/>=<sp/>posn;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(iost<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(nline);</highlight></codeline>
<codeline lineno="823"><highlight class="normal">}</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="openfdem__commom_8c_1afa541b0a975a6787ce700def1480026c" kindref="member">create_result_store_folder</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>Result_store_folder)</highlight></codeline>
<codeline lineno="826"><highlight class="normal">{</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_mkdir(Result_store_folder)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Folder<sp/>%s<sp/>was<sp/>successfully<sp/>created.\n&quot;</highlight><highlight class="normal">,<sp/>Result_store_folder);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;*****<sp/>\\%s<sp/>folder<sp/>already<sp/>exist.<sp/>\n&quot;</highlight><highlight class="normal">,<sp/>Result_store_folder);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="835"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="openfdem_commom.c"/>
  </compounddef>
</doxygen>
