<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="push__element__materials_8c" kind="file" language="C++">
    <compoundname>push_element_materials.c</compoundname>
    <includes refid="push__element__materials_8h" local="yes">push_element_materials.h</includes>
    <incdepgraph>
      <node id="3">
        <label>../../../io/parser.h</label>
      </node>
      <node id="1">
        <label>materials/solid_mat/push_element_materials.c</label>
        <link refid="push__element__materials_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>push_element_materials.h</label>
        <link refid="push__element__materials_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="push__element__materials_8c_1a6d2da4145c9674f4b21cafa4d9443dee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void push_element_materials</definition>
        <argsstring>(General general, Element element, Group group, Solidmat solidmat, char *keyword)</argsstring>
        <name>push_element_materials</name>
        <param>
          <type>General</type>
          <declname>general</declname>
        </param>
        <param>
          <type><ref refid="openfdem__solid_8h_1af26d43ea4cd21d871010e3de16a6109d" kindref="member">Element</ref></type>
          <declname>element</declname>
        </param>
        <param>
          <type>Group</type>
          <declname>group</declname>
        </param>
        <param>
          <type><ref refid="openfdem__mat_8h_1a10eec44786d5659964548a8edabef182" kindref="member">Solidmat</ref></type>
          <declname>solidmat</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>keyword</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="materials/solid_mat/push_element_materials.c" line="3" column="6" bodyfile="materials/solid_mat/push_element_materials.c" bodystart="3" bodyend="542"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="push__element__materials_8h" kindref="compound">push_element_materials.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="push__element__materials_8c_1a6d2da4145c9674f4b21cafa4d9443dee" kindref="member">push_element_materials</ref>(General<sp/>general,<sp/><ref refid="struct_element__structure" kindref="compound">Element</ref><sp/>element,<sp/>Group<sp/>group,<sp/><ref refid="struct_solid__mat__structure" kindref="compound">Solidmat</ref><sp/>solidmat,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>keyword)<sp/>{</highlight></codeline>
<codeline lineno="4"><highlight class="normal"><sp/><sp/><sp/><sp/>UInt<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nmat<sp/><sp/><sp/><sp/>=<sp/>solidmat-&gt;<ref refid="struct_solid__mat__structure_1a9bf222653a1caf69f238a56ea88c1178" kindref="member">n_mat</ref>;</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmat__element__t" kindref="compound">mat_element_t</ref>*<sp/>ele_mat<sp/>=<sp/>solidmat-&gt;<ref refid="struct_solid__mat__structure_1abd0efe4abcf7d9df0896b53186177ae5" kindref="member">elemat</ref>;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/>Real<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cons[10];</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>find_id<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sn[300];</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat_keyword[20];<sp/></highlight><highlight class="comment">/*maximuum<sp/>10<sp/>keyowrds<sp/>for<sp/>each<sp/>model<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>20;<sp/>i++)</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat_keyword[i]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>keyword_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>delim[]<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stricmp(</highlight><highlight class="stringliteral">&quot;all&quot;</highlight><highlight class="normal">,<sp/>keyword))<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nmat<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat<sp/>=<sp/>(<ref refid="structmat__element__t" kindref="compound">mat_element_t</ref>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structmat__element__t" kindref="compound">mat_element_t</ref>));</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmat__element__t" kindref="compound">mat_element_t</ref>*<sp/>temp<sp/>=<sp/>(<ref refid="structmat__element__t" kindref="compound">mat_element_t</ref>*)realloc(ele_mat,<sp/>(nmat<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structmat__element__t" kindref="compound">mat_element_t</ref>));</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>push<sp/>to<sp/>element<sp/>matid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(UInt<sp/>elementid<sp/>=<sp/>0;<sp/>elementid<sp/>&lt;<sp/>element-&gt;<ref refid="struct_element__structure_1a47bec07d0894339c532c714540d4087c" kindref="member">e_num</ref>;<sp/>elementid++)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element-&gt;<ref refid="struct_element__structure_1a6c9b10a142500847fddcc2b5fd237c13" kindref="member">ele</ref>[elementid].<ref refid="structelement__type_1abdc03d35cad4b39f082215c818e84067" kindref="member">matid</ref><sp/>=<sp/>nmat;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>damp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a40cb5b4cd1114f92e20d24963e7d3d88" kindref="member">damp</ref><sp/>=<sp/>0.0;<sp/><sp/></highlight><highlight class="comment">//<sp/>default<sp/>is<sp/>0.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a7bb5e40c10df6a41df64bda1f4bb3e26" kindref="member">tag</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>*<sp/>20);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(ele_mat[nmat].tag,<sp/>keyword);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cons<sp/>and<sp/>mat</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parse_keyword(general-&gt;InputFile,<sp/>cons);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stricmp(cons,<sp/></highlight><highlight class="stringliteral">&quot;ELASTIC&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>a<sp/>line<sp/>to<sp/>avoid<sp/>\n<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>line<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>fscanf(general-&gt;InputFile,<sp/></highlight><highlight class="stringliteral">&quot;%[^\n]%*c&quot;</highlight><highlight class="normal">,<sp/>sn);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>split<sp/>the<sp/>string<sp/>into<sp/>strings<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>ptr<sp/>=<sp/>strtok(sn,<sp/>delim);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ptr<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat_keyword[keyword_count]<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>*<sp/>20);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(mat_keyword[keyword_count],<sp/>ptr);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>strtok(NULL,<sp/>delim);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyword_count++;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1ab7d2c2ff27ff51d56eb332cb487653a6" kindref="member">cons</ref><sp/>=<sp/>ELASTIC;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref><sp/><sp/>=<sp/>(<ref refid="unionany__mat__type" kindref="compound">any_mat_type</ref>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="unionany__mat__type" kindref="compound">any_mat_type</ref>));</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*initialize<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1abef76d23cdd90539c6c86a2b2d9464c7" kindref="member">den</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1a14c963d6d8380710c186c60602e1f0ca" kindref="member">E</ref><sp/><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1a06898261af043e5ebf4d9444a4383d54" kindref="member">v</ref><sp/><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1af625b8a1d8ebc4a81dd229d2274879ac" kindref="member">K</ref><sp/><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1a2195b706c3b8de0b5adb9ccb58eeb4d4" kindref="member">G</ref><sp/><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>keyword_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strnicmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;density&quot;</highlight><highlight class="normal">,<sp/>3)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>density<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1abef76d23cdd90539c6c86a2b2d9464c7" kindref="member">den</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stricmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;E&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>elastic<sp/>modulus<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1a14c963d6d8380710c186c60602e1f0ca" kindref="member">E</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stricmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;v&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>Poission&apos;s<sp/>ratio<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1a06898261af043e5ebf4d9444a4383d54" kindref="member">v</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stricmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;K&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>bulk<sp/>modulus<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1af625b8a1d8ebc4a81dd229d2274879ac" kindref="member">K</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stricmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;G&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>shear<sp/>modulus<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1a2195b706c3b8de0b5adb9ccb58eeb4d4" kindref="member">G</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strnicmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;damp&quot;</highlight><highlight class="normal">,<sp/>3)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>damping<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a40cb5b4cd1114f92e20d24963e7d3d88" kindref="member">damp</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strnicmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;#&quot;</highlight><highlight class="normal">,<sp/>1)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>comments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_message_keyword(</highlight><highlight class="stringliteral">&quot;Error:<sp/>no<sp/>found<sp/>keyword:<sp/>&quot;</highlight><highlight class="normal">,<sp/>mat_keyword[i]);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(-1);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ele_mat[nmat].mat-&gt;elastic.K<sp/>==<sp/>0.0)<sp/></highlight><highlight class="comment">/*<sp/>E<sp/>v<sp/>to<sp/>K<sp/>G*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1af625b8a1d8ebc4a81dd229d2274879ac" kindref="member">K</ref><sp/>=<sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1a14c963d6d8380710c186c60602e1f0ca" kindref="member">E</ref><sp/>/<sp/>3.0<sp/>/<sp/>(1.0<sp/>-<sp/>2.0<sp/>*<sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1a06898261af043e5ebf4d9444a4383d54" kindref="member">v</ref>);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1a2195b706c3b8de0b5adb9ccb58eeb4d4" kindref="member">G</ref><sp/>=<sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1a14c963d6d8380710c186c60602e1f0ca" kindref="member">E</ref><sp/>/<sp/>2.0<sp/>/<sp/>(1.0<sp/>+<sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1a06898261af043e5ebf4d9444a4383d54" kindref="member">v</ref>);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ele_mat[nmat].mat-&gt;elastic.E<sp/>==<sp/>0.0)<sp/></highlight><highlight class="comment">/*<sp/>K<sp/>G<sp/>to<sp/>E<sp/>v<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1a14c963d6d8380710c186c60602e1f0ca" kindref="member">E</ref><sp/>=<sp/>9.0<sp/>*<sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1af625b8a1d8ebc4a81dd229d2274879ac" kindref="member">K</ref><sp/>*<sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1a2195b706c3b8de0b5adb9ccb58eeb4d4" kindref="member">G</ref><sp/>/</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(3.0<sp/>*<sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1af625b8a1d8ebc4a81dd229d2274879ac" kindref="member">K</ref><sp/>+<sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1a2195b706c3b8de0b5adb9ccb58eeb4d4" kindref="member">G</ref>);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1a06898261af043e5ebf4d9444a4383d54" kindref="member">v</ref><sp/>=<sp/>(3.0<sp/>*<sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1af625b8a1d8ebc4a81dd229d2274879ac" kindref="member">K</ref><sp/>-<sp/>2.0<sp/>*<sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1a2195b706c3b8de0b5adb9ccb58eeb4d4" kindref="member">G</ref>)<sp/>/<sp/>2.0<sp/>/</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(3.0<sp/>*<sp/>ele_mat[nmat].mat-&gt;elastic.K<sp/>+<sp/>ele_mat[nmat].mat-&gt;elastic.G);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nmat++;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stricmp(cons,<sp/></highlight><highlight class="stringliteral">&quot;RIGID&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>a<sp/>line<sp/>to<sp/>avoid<sp/>\n<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>line<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>fscanf(general-&gt;InputFile,<sp/></highlight><highlight class="stringliteral">&quot;%[^\n]%*c&quot;</highlight><highlight class="normal">,<sp/>sn);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>split<sp/>the<sp/>string<sp/>into<sp/>strings<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>ptr<sp/>=<sp/>strtok(sn,<sp/>delim);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ptr<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat_keyword[keyword_count]<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>*<sp/>20);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(mat_keyword[keyword_count],<sp/>ptr);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>strtok(NULL,<sp/>delim);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyword_count++;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1ab7d2c2ff27ff51d56eb332cb487653a6" kindref="member">cons</ref><sp/>=<sp/>RIGID;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref><sp/><sp/>=<sp/>(<ref refid="unionany__mat__type" kindref="compound">any_mat_type</ref>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="unionany__mat__type" kindref="compound">any_mat_type</ref>));</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*initialize<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a91999daf3c4591bf3eee460d8526ed15" kindref="member">rigid</ref>.<ref refid="structsolid__rigid__t_1abef76d23cdd90539c6c86a2b2d9464c7" kindref="member">den</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>keyword_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strnicmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;density&quot;</highlight><highlight class="normal">,<sp/>3)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>density<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a91999daf3c4591bf3eee460d8526ed15" kindref="member">rigid</ref>.<ref refid="structsolid__rigid__t_1abef76d23cdd90539c6c86a2b2d9464c7" kindref="member">den</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strnicmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;#&quot;</highlight><highlight class="normal">,<sp/>1)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>comments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_message_keyword(</highlight><highlight class="stringliteral">&quot;Error:<sp/>no<sp/>found<sp/>keyword:<sp/>&quot;</highlight><highlight class="normal">,<sp/>mat_keyword[i]);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(-1);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nmat++;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stricmp(cons,<sp/></highlight><highlight class="stringliteral">&quot;SOFTEN&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1ab7d2c2ff27ff51d56eb332cb487653a6" kindref="member">cons</ref><sp/>=<sp/>SOFTEN;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nmat++;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stricmp(cons,<sp/></highlight><highlight class="stringliteral">&quot;TRANSVERSE&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>a<sp/>line<sp/>to<sp/>avoid<sp/>\n<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>line<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>fscanf(general-&gt;InputFile,<sp/></highlight><highlight class="stringliteral">&quot;%[^\n]%*c&quot;</highlight><highlight class="normal">,<sp/>sn);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>split<sp/>the<sp/>string<sp/>into<sp/>strings<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>ptr<sp/>=<sp/>strtok(sn,<sp/>delim);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ptr<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat_keyword[keyword_count]<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>*<sp/>20);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(mat_keyword[keyword_count],<sp/>ptr);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>strtok(NULL,<sp/>delim);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyword_count++;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1ab7d2c2ff27ff51d56eb332cb487653a6" kindref="member">cons</ref><sp/>=<sp/>TRANSVERSE;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref><sp/><sp/>=<sp/>(<ref refid="unionany__mat__type" kindref="compound">any_mat_type</ref>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="unionany__mat__type" kindref="compound">any_mat_type</ref>));</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*initialize<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a9c2c9b883d2dcaf1f338eb3fbc7ff870" kindref="member">transverse</ref>.<ref refid="structsolid__transverse__t_1abef76d23cdd90539c6c86a2b2d9464c7" kindref="member">den</ref><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a9c2c9b883d2dcaf1f338eb3fbc7ff870" kindref="member">transverse</ref>.<ref refid="structsolid__transverse__t_1a1bfdc5293066da13dd33822a34ceeee4" kindref="member">E_x</ref><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a9c2c9b883d2dcaf1f338eb3fbc7ff870" kindref="member">transverse</ref>.<ref refid="structsolid__transverse__t_1ac9f8f73d3b87650e2571fe1b6ebf04bf" kindref="member">E_y</ref><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a9c2c9b883d2dcaf1f338eb3fbc7ff870" kindref="member">transverse</ref>.<ref refid="structsolid__transverse__t_1a52583b276283782378d4cf7bfb8866c7" kindref="member">v_xy</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a9c2c9b883d2dcaf1f338eb3fbc7ff870" kindref="member">transverse</ref>.<ref refid="structsolid__transverse__t_1a86edb4cc4c4b33c1137c00a4fb37368a" kindref="member">v_yx</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a9c2c9b883d2dcaf1f338eb3fbc7ff870" kindref="member">transverse</ref>.<ref refid="structsolid__transverse__t_1a2195b706c3b8de0b5adb9ccb58eeb4d4" kindref="member">G</ref><sp/><sp/><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>keyword_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strnicmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;density&quot;</highlight><highlight class="normal">,<sp/>3)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>density<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a9c2c9b883d2dcaf1f338eb3fbc7ff870" kindref="member">transverse</ref>.<ref refid="structsolid__transverse__t_1abef76d23cdd90539c6c86a2b2d9464c7" kindref="member">den</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stricmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;E_x&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>elastic<sp/>modulus<sp/>in<sp/>x<sp/>direction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a9c2c9b883d2dcaf1f338eb3fbc7ff870" kindref="member">transverse</ref>.<ref refid="structsolid__transverse__t_1a1bfdc5293066da13dd33822a34ceeee4" kindref="member">E_x</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stricmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;E_y&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/><sp/>elastic<sp/>modulus<sp/><sp/>in<sp/>y<sp/>direction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a9c2c9b883d2dcaf1f338eb3fbc7ff870" kindref="member">transverse</ref>.<ref refid="structsolid__transverse__t_1ac9f8f73d3b87650e2571fe1b6ebf04bf" kindref="member">E_y</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stricmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;v_xy&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>Poission&apos;s<sp/>ratio<sp/>in<sp/>xy<sp/>direction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a9c2c9b883d2dcaf1f338eb3fbc7ff870" kindref="member">transverse</ref>.<ref refid="structsolid__transverse__t_1a52583b276283782378d4cf7bfb8866c7" kindref="member">v_xy</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stricmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;v_yx&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>Poission&apos;s<sp/>ratio<sp/>in<sp/>yx<sp/>direction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a9c2c9b883d2dcaf1f338eb3fbc7ff870" kindref="member">transverse</ref>.<ref refid="structsolid__transverse__t_1a86edb4cc4c4b33c1137c00a4fb37368a" kindref="member">v_yx</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stricmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;G&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>shear<sp/>modulus<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1a2195b706c3b8de0b5adb9ccb58eeb4d4" kindref="member">G</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strnicmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;damp&quot;</highlight><highlight class="normal">,<sp/>3)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>damping<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a40cb5b4cd1114f92e20d24963e7d3d88" kindref="member">damp</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strnicmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;#&quot;</highlight><highlight class="normal">,<sp/>1)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>comments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_message_keyword(</highlight><highlight class="stringliteral">&quot;Error:<sp/>no<sp/>found<sp/>keyword:<sp/>&quot;</highlight><highlight class="normal">,<sp/>mat_keyword[i]);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(-1);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nmat++;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stricmp(cons,<sp/></highlight><highlight class="stringliteral">&quot;MC&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>a<sp/>line<sp/>to<sp/>avoid<sp/>\n<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>line<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>fscanf(general-&gt;InputFile,<sp/></highlight><highlight class="stringliteral">&quot;%[^\n]%*c&quot;</highlight><highlight class="normal">,<sp/>sn);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>split<sp/>the<sp/>string<sp/>into<sp/>strings<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>ptr<sp/>=<sp/>strtok(sn,<sp/>delim);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ptr<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat_keyword[keyword_count]<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>*<sp/>20);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(mat_keyword[keyword_count],<sp/>ptr);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>strtok(NULL,<sp/>delim);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyword_count++;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1ab7d2c2ff27ff51d56eb332cb487653a6" kindref="member">cons</ref><sp/>=<sp/>MC;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref><sp/><sp/>=<sp/>(<ref refid="unionany__mat__type" kindref="compound">any_mat_type</ref>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="unionany__mat__type" kindref="compound">any_mat_type</ref>));</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*initialize<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1abef76d23cdd90539c6c86a2b2d9464c7" kindref="member">den</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1a14c963d6d8380710c186c60602e1f0ca" kindref="member">E</ref><sp/><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1a06898261af043e5ebf4d9444a4383d54" kindref="member">v</ref><sp/><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1a4c9547f0756d1ef47036d3e7bfee1ddd" kindref="member">ten</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1a792ea6e0cbf026edd6f77835f0fb7c8d" kindref="member">coh</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1a87632afe13128ce6163d016ae441eb29" kindref="member">fri</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>keyword_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strnicmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;density&quot;</highlight><highlight class="normal">,<sp/>3)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>density<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1abef76d23cdd90539c6c86a2b2d9464c7" kindref="member">den</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stricmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;E&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>elastic<sp/>modulus<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1a14c963d6d8380710c186c60602e1f0ca" kindref="member">E</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stricmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;v&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Poission&apos;s<sp/>ratio<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1a06898261af043e5ebf4d9444a4383d54" kindref="member">v</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strnicmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;tension&quot;</highlight><highlight class="normal">,<sp/>3)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>tension<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1a4c9547f0756d1ef47036d3e7bfee1ddd" kindref="member">ten</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strnicmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;cohesion&quot;</highlight><highlight class="normal">,<sp/>3)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>cohesion<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1a792ea6e0cbf026edd6f77835f0fb7c8d" kindref="member">coh</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strnicmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;friction&quot;</highlight><highlight class="normal">,<sp/>3)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>friction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1a87632afe13128ce6163d016ae441eb29" kindref="member">fri</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strnicmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;damp&quot;</highlight><highlight class="normal">,<sp/>3)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>damping<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a40cb5b4cd1114f92e20d24963e7d3d88" kindref="member">damp</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strnicmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;#&quot;</highlight><highlight class="normal">,<sp/>1)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>comments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_message_keyword(</highlight><highlight class="stringliteral">&quot;Error:<sp/>no<sp/>found<sp/>keyword:<sp/>&quot;</highlight><highlight class="normal">,<sp/>mat_keyword[i]);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(-1);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ele_mat[nmat].mat-&gt;MC.K<sp/>==<sp/>0.0)<sp/></highlight><highlight class="comment">/*<sp/>E<sp/>v<sp/>to<sp/>K<sp/>G*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1af625b8a1d8ebc4a81dd229d2274879ac" kindref="member">K</ref><sp/>=<sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1a14c963d6d8380710c186c60602e1f0ca" kindref="member">E</ref><sp/>/<sp/>3.0<sp/>/<sp/>(1.0<sp/>-<sp/>2.0<sp/>*<sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1a06898261af043e5ebf4d9444a4383d54" kindref="member">v</ref>);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1a2195b706c3b8de0b5adb9ccb58eeb4d4" kindref="member">G</ref><sp/>=<sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1a14c963d6d8380710c186c60602e1f0ca" kindref="member">E</ref><sp/>/<sp/>2.0<sp/>/<sp/>(1.0<sp/>+<sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1a06898261af043e5ebf4d9444a4383d54" kindref="member">v</ref>);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ele_mat[nmat].mat-&gt;MC.E<sp/>==<sp/>0.0)<sp/></highlight><highlight class="comment">/*<sp/>K<sp/>G<sp/>to<sp/>E<sp/>v<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1a14c963d6d8380710c186c60602e1f0ca" kindref="member">E</ref><sp/>=<sp/>9.0<sp/>*<sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1af625b8a1d8ebc4a81dd229d2274879ac" kindref="member">K</ref><sp/>*<sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1a2195b706c3b8de0b5adb9ccb58eeb4d4" kindref="member">G</ref><sp/>/</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(3.0<sp/>*<sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1af625b8a1d8ebc4a81dd229d2274879ac" kindref="member">K</ref><sp/>+<sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1a2195b706c3b8de0b5adb9ccb58eeb4d4" kindref="member">G</ref>);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1a06898261af043e5ebf4d9444a4383d54" kindref="member">v</ref><sp/>=<sp/>(3.0<sp/>*<sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1af625b8a1d8ebc4a81dd229d2274879ac" kindref="member">K</ref><sp/>-<sp/>2.0<sp/>*<sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1a2195b706c3b8de0b5adb9ccb58eeb4d4" kindref="member">G</ref>)<sp/>/<sp/>2.0<sp/>/</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(3.0<sp/>*<sp/>ele_mat[nmat].mat-&gt;MC.K<sp/>+<sp/>ele_mat[nmat].mat-&gt;MC.G);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nmat++;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stricmp(cons,<sp/></highlight><highlight class="stringliteral">&quot;DP&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1ab7d2c2ff27ff51d56eb332cb487653a6" kindref="member">cons</ref><sp/>=<sp/>DP;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nmat++;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_message(</highlight><highlight class="stringliteral">&quot;Error:<sp/>unrecognised<sp/>boudary<sp/>type.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(group-&gt;ng_ele<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_message_keyword(</highlight><highlight class="stringliteral">&quot;Error:<sp/>unknown<sp/>element<sp/>groups<sp/>found:&quot;</highlight><highlight class="normal">,<sp/>keyword);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(UInt<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>group-&gt;ng_ele;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stricmp(group-&gt;ele[i].tag,<sp/>keyword))<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>find_id++;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nmat<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat<sp/>=<sp/>(<ref refid="structmat__element__t" kindref="compound">mat_element_t</ref>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structmat__element__t" kindref="compound">mat_element_t</ref>));</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmat__element__t" kindref="compound">mat_element_t</ref>*<sp/>temp<sp/>=<sp/>(<ref refid="structmat__element__t" kindref="compound">mat_element_t</ref>*)realloc(ele_mat,<sp/>(nmat<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structmat__element__t" kindref="compound">mat_element_t</ref>));</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>push<sp/>to<sp/>element<sp/>matid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(UInt<sp/>elementid<sp/>=<sp/>0;<sp/>elementid<sp/>&lt;<sp/>group-&gt;ele[i].size;<sp/>elementid++)<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element-&gt;<ref refid="struct_element__structure_1a6c9b10a142500847fddcc2b5fd237c13" kindref="member">ele</ref>[group-&gt;ele[i].ele[elementid]].<ref refid="structelement__type_1abdc03d35cad4b39f082215c818e84067" kindref="member">matid</ref><sp/>=<sp/>nmat;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>damp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a40cb5b4cd1114f92e20d24963e7d3d88" kindref="member">damp</ref><sp/>=<sp/>0.0;<sp/><sp/></highlight><highlight class="comment">//<sp/>default<sp/>is<sp/>0.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a7bb5e40c10df6a41df64bda1f4bb3e26" kindref="member">tag</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>*<sp/>20);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(ele_mat[nmat].tag,<sp/>keyword);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cons<sp/>and<sp/>mat</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parse_keyword(general-&gt;InputFile,<sp/>cons);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stricmp(cons,<sp/></highlight><highlight class="stringliteral">&quot;ELASTIC&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>a<sp/>line<sp/>to<sp/>avoid<sp/>\n<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>line<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>fscanf(general-&gt;InputFile,<sp/></highlight><highlight class="stringliteral">&quot;%[^\n]%*c&quot;</highlight><highlight class="normal">,<sp/>sn);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>split<sp/>the<sp/>string<sp/>into<sp/>strings<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>ptr<sp/>=<sp/>strtok(sn,<sp/>delim);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ptr<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat_keyword[keyword_count]<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>*<sp/>20);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(mat_keyword[keyword_count],<sp/>ptr);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>strtok(NULL,<sp/>delim);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyword_count++;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1ab7d2c2ff27ff51d56eb332cb487653a6" kindref="member">cons</ref><sp/>=<sp/>ELASTIC;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref><sp/><sp/>=<sp/>(<ref refid="unionany__mat__type" kindref="compound">any_mat_type</ref>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="unionany__mat__type" kindref="compound">any_mat_type</ref>));</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*initialize<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1abef76d23cdd90539c6c86a2b2d9464c7" kindref="member">den</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1a14c963d6d8380710c186c60602e1f0ca" kindref="member">E</ref><sp/><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1a06898261af043e5ebf4d9444a4383d54" kindref="member">v</ref><sp/><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1af625b8a1d8ebc4a81dd229d2274879ac" kindref="member">K</ref><sp/><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1a2195b706c3b8de0b5adb9ccb58eeb4d4" kindref="member">G</ref><sp/><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>keyword_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strnicmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;density&quot;</highlight><highlight class="normal">,<sp/>3)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>density<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1abef76d23cdd90539c6c86a2b2d9464c7" kindref="member">den</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stricmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;E&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>elastic<sp/>modulus<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1a14c963d6d8380710c186c60602e1f0ca" kindref="member">E</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stricmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;v&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>Poission&apos;s<sp/>ratio<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1a06898261af043e5ebf4d9444a4383d54" kindref="member">v</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stricmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;K&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>bulk<sp/>modulus<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1af625b8a1d8ebc4a81dd229d2274879ac" kindref="member">K</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stricmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;G&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>shear<sp/>modulus<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1a2195b706c3b8de0b5adb9ccb58eeb4d4" kindref="member">G</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strnicmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;damp&quot;</highlight><highlight class="normal">,<sp/>3)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>damping<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a40cb5b4cd1114f92e20d24963e7d3d88" kindref="member">damp</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strnicmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;#&quot;</highlight><highlight class="normal">,<sp/>1)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>comments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_message_keyword(</highlight><highlight class="stringliteral">&quot;Error:<sp/>no<sp/>found<sp/>keyword:<sp/>&quot;</highlight><highlight class="normal">,<sp/>mat_keyword[i]);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(-1);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ele_mat[nmat].mat-&gt;elastic.K<sp/>==<sp/>0.0)<sp/></highlight><highlight class="comment">/*<sp/>E<sp/>v<sp/>to<sp/>K<sp/>G*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1af625b8a1d8ebc4a81dd229d2274879ac" kindref="member">K</ref><sp/>=</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1a14c963d6d8380710c186c60602e1f0ca" kindref="member">E</ref><sp/>/<sp/>3.0<sp/>/<sp/>(1.0<sp/>-<sp/>2.0<sp/>*<sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1a06898261af043e5ebf4d9444a4383d54" kindref="member">v</ref>);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1a2195b706c3b8de0b5adb9ccb58eeb4d4" kindref="member">G</ref><sp/>=<sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1a14c963d6d8380710c186c60602e1f0ca" kindref="member">E</ref><sp/>/<sp/>2.0<sp/>/<sp/>(1.0<sp/>+<sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1a06898261af043e5ebf4d9444a4383d54" kindref="member">v</ref>);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ele_mat[nmat].mat-&gt;elastic.E<sp/>==<sp/>0.0)<sp/></highlight><highlight class="comment">/*<sp/>K<sp/>G<sp/>to<sp/>E<sp/>v<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1a14c963d6d8380710c186c60602e1f0ca" kindref="member">E</ref><sp/>=<sp/>9.0<sp/>*<sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1af625b8a1d8ebc4a81dd229d2274879ac" kindref="member">K</ref><sp/>*<sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1a2195b706c3b8de0b5adb9ccb58eeb4d4" kindref="member">G</ref><sp/>/</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(3.0<sp/>*<sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1af625b8a1d8ebc4a81dd229d2274879ac" kindref="member">K</ref><sp/>+<sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1a2195b706c3b8de0b5adb9ccb58eeb4d4" kindref="member">G</ref>);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1a06898261af043e5ebf4d9444a4383d54" kindref="member">v</ref><sp/>=<sp/>(3.0<sp/>*<sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1af625b8a1d8ebc4a81dd229d2274879ac" kindref="member">K</ref><sp/>-<sp/>2.0<sp/>*<sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1a2195b706c3b8de0b5adb9ccb58eeb4d4" kindref="member">G</ref>)<sp/>/</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.0<sp/>/<sp/>(3.0<sp/>*<sp/>ele_mat[nmat].mat-&gt;elastic.K<sp/>+<sp/>ele_mat[nmat].mat-&gt;elastic.G);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nmat++;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stricmp(cons,<sp/></highlight><highlight class="stringliteral">&quot;RIGID&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>a<sp/>line<sp/>to<sp/>avoid<sp/>\n<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>line<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>fscanf(general-&gt;InputFile,<sp/></highlight><highlight class="stringliteral">&quot;%[^\n]%*c&quot;</highlight><highlight class="normal">,<sp/>sn);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>split<sp/>the<sp/>string<sp/>into<sp/>strings<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>ptr<sp/>=<sp/>strtok(sn,<sp/>delim);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ptr<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat_keyword[keyword_count]<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>*<sp/>20);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(mat_keyword[keyword_count],<sp/>ptr);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>strtok(NULL,<sp/>delim);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyword_count++;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1ab7d2c2ff27ff51d56eb332cb487653a6" kindref="member">cons</ref><sp/>=<sp/>RIGID;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref><sp/><sp/>=<sp/>(<ref refid="unionany__mat__type" kindref="compound">any_mat_type</ref>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="unionany__mat__type" kindref="compound">any_mat_type</ref>));</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*initialize<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a91999daf3c4591bf3eee460d8526ed15" kindref="member">rigid</ref>.<ref refid="structsolid__rigid__t_1abef76d23cdd90539c6c86a2b2d9464c7" kindref="member">den</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>keyword_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strnicmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;density&quot;</highlight><highlight class="normal">,<sp/>3)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>density<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a91999daf3c4591bf3eee460d8526ed15" kindref="member">rigid</ref>.<ref refid="structsolid__rigid__t_1abef76d23cdd90539c6c86a2b2d9464c7" kindref="member">den</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strnicmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;#&quot;</highlight><highlight class="normal">,<sp/>1)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>comments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_message_keyword(</highlight><highlight class="stringliteral">&quot;Error:<sp/>no<sp/>found<sp/>keyword:<sp/>&quot;</highlight><highlight class="normal">,<sp/>mat_keyword[i]);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(-1);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nmat++;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stricmp(cons,<sp/></highlight><highlight class="stringliteral">&quot;SOFTEN&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1ab7d2c2ff27ff51d56eb332cb487653a6" kindref="member">cons</ref><sp/>=<sp/>SOFTEN;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nmat++;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stricmp(cons,<sp/></highlight><highlight class="stringliteral">&quot;TRANSVERSE&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>a<sp/>line<sp/>to<sp/>avoid<sp/>\n<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>line<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>fscanf(general-&gt;InputFile,<sp/></highlight><highlight class="stringliteral">&quot;%[^\n]%*c&quot;</highlight><highlight class="normal">,<sp/>sn);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>split<sp/>the<sp/>string<sp/>into<sp/>strings<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>ptr<sp/>=<sp/>strtok(sn,<sp/>delim);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ptr<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat_keyword[keyword_count]<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>*<sp/>20);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(mat_keyword[keyword_count],<sp/>ptr);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>strtok(NULL,<sp/>delim);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyword_count++;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1ab7d2c2ff27ff51d56eb332cb487653a6" kindref="member">cons</ref><sp/>=<sp/>TRANSVERSE;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref><sp/><sp/>=<sp/>(<ref refid="unionany__mat__type" kindref="compound">any_mat_type</ref>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="unionany__mat__type" kindref="compound">any_mat_type</ref>));</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*initialize<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a9c2c9b883d2dcaf1f338eb3fbc7ff870" kindref="member">transverse</ref>.<ref refid="structsolid__transverse__t_1abef76d23cdd90539c6c86a2b2d9464c7" kindref="member">den</ref><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a9c2c9b883d2dcaf1f338eb3fbc7ff870" kindref="member">transverse</ref>.<ref refid="structsolid__transverse__t_1a1bfdc5293066da13dd33822a34ceeee4" kindref="member">E_x</ref><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a9c2c9b883d2dcaf1f338eb3fbc7ff870" kindref="member">transverse</ref>.<ref refid="structsolid__transverse__t_1ac9f8f73d3b87650e2571fe1b6ebf04bf" kindref="member">E_y</ref><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a9c2c9b883d2dcaf1f338eb3fbc7ff870" kindref="member">transverse</ref>.<ref refid="structsolid__transverse__t_1a52583b276283782378d4cf7bfb8866c7" kindref="member">v_xy</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a9c2c9b883d2dcaf1f338eb3fbc7ff870" kindref="member">transverse</ref>.<ref refid="structsolid__transverse__t_1a86edb4cc4c4b33c1137c00a4fb37368a" kindref="member">v_yx</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a9c2c9b883d2dcaf1f338eb3fbc7ff870" kindref="member">transverse</ref>.<ref refid="structsolid__transverse__t_1a2195b706c3b8de0b5adb9ccb58eeb4d4" kindref="member">G</ref><sp/><sp/><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>keyword_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strnicmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;density&quot;</highlight><highlight class="normal">,<sp/>3)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>density<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a9c2c9b883d2dcaf1f338eb3fbc7ff870" kindref="member">transverse</ref>.<ref refid="structsolid__transverse__t_1abef76d23cdd90539c6c86a2b2d9464c7" kindref="member">den</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stricmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;E_x&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>elastic<sp/>modulus<sp/>in<sp/>x<sp/>direction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a9c2c9b883d2dcaf1f338eb3fbc7ff870" kindref="member">transverse</ref>.<ref refid="structsolid__transverse__t_1a1bfdc5293066da13dd33822a34ceeee4" kindref="member">E_x</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stricmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;E_y&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/><sp/>elastic<sp/>modulus<sp/><sp/>in<sp/>y<sp/>direction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a9c2c9b883d2dcaf1f338eb3fbc7ff870" kindref="member">transverse</ref>.<ref refid="structsolid__transverse__t_1ac9f8f73d3b87650e2571fe1b6ebf04bf" kindref="member">E_y</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stricmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;v_xy&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>Poission&apos;s<sp/>ratio<sp/>in<sp/>xy<sp/>direction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a9c2c9b883d2dcaf1f338eb3fbc7ff870" kindref="member">transverse</ref>.<ref refid="structsolid__transverse__t_1a52583b276283782378d4cf7bfb8866c7" kindref="member">v_xy</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stricmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;v_yx&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>Poission&apos;s<sp/>ratio<sp/>in<sp/>yx<sp/>direction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a9c2c9b883d2dcaf1f338eb3fbc7ff870" kindref="member">transverse</ref>.<ref refid="structsolid__transverse__t_1a86edb4cc4c4b33c1137c00a4fb37368a" kindref="member">v_yx</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stricmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;G&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>shear<sp/>modulus<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1a3e9d2489a661ef5fe97aa56c27708415" kindref="member">elastic</ref>.<ref refid="structsolid__elastic__t_1a2195b706c3b8de0b5adb9ccb58eeb4d4" kindref="member">G</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strnicmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;damp&quot;</highlight><highlight class="normal">,<sp/>3)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>damping<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a40cb5b4cd1114f92e20d24963e7d3d88" kindref="member">damp</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strnicmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;#&quot;</highlight><highlight class="normal">,<sp/>1)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>comments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_message_keyword(</highlight><highlight class="stringliteral">&quot;Error:<sp/>no<sp/>found<sp/>keyword:<sp/>&quot;</highlight><highlight class="normal">,<sp/>mat_keyword[i]);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(-1);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nmat++;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stricmp(cons,<sp/></highlight><highlight class="stringliteral">&quot;MC&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>a<sp/>line<sp/>to<sp/>avoid<sp/>\n<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>line<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>fscanf(general-&gt;InputFile,<sp/></highlight><highlight class="stringliteral">&quot;%[^\n]%*c&quot;</highlight><highlight class="normal">,<sp/>sn);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>split<sp/>the<sp/>string<sp/>into<sp/>strings<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>ptr<sp/>=<sp/>strtok(sn,<sp/>delim);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ptr<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat_keyword[keyword_count]<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>*<sp/>20);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(mat_keyword[keyword_count],<sp/>ptr);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>strtok(NULL,<sp/>delim);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyword_count++;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1ab7d2c2ff27ff51d56eb332cb487653a6" kindref="member">cons</ref><sp/>=<sp/>MC;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref><sp/><sp/>=<sp/>(<ref refid="unionany__mat__type" kindref="compound">any_mat_type</ref>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="unionany__mat__type" kindref="compound">any_mat_type</ref>));</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*initialize<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1abef76d23cdd90539c6c86a2b2d9464c7" kindref="member">den</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1a14c963d6d8380710c186c60602e1f0ca" kindref="member">E</ref><sp/><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1a06898261af043e5ebf4d9444a4383d54" kindref="member">v</ref><sp/><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1a4c9547f0756d1ef47036d3e7bfee1ddd" kindref="member">ten</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1a792ea6e0cbf026edd6f77835f0fb7c8d" kindref="member">coh</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1a87632afe13128ce6163d016ae441eb29" kindref="member">fri</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>keyword_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strnicmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;density&quot;</highlight><highlight class="normal">,<sp/>3)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>density<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1abef76d23cdd90539c6c86a2b2d9464c7" kindref="member">den</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stricmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;E&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>elastic<sp/>modulus<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1a14c963d6d8380710c186c60602e1f0ca" kindref="member">E</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stricmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;v&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Poission&apos;s<sp/>ratio<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1a06898261af043e5ebf4d9444a4383d54" kindref="member">v</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strnicmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;tension&quot;</highlight><highlight class="normal">,<sp/>3)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>tension<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1a4c9547f0756d1ef47036d3e7bfee1ddd" kindref="member">ten</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strnicmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;cohesion&quot;</highlight><highlight class="normal">,<sp/>3)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>cohesion<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1a792ea6e0cbf026edd6f77835f0fb7c8d" kindref="member">coh</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strnicmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;friction&quot;</highlight><highlight class="normal">,<sp/>3)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>friction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1a87632afe13128ce6163d016ae441eb29" kindref="member">fri</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strnicmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;damp&quot;</highlight><highlight class="normal">,<sp/>3)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>damping<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a40cb5b4cd1114f92e20d24963e7d3d88" kindref="member">damp</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strnicmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;#&quot;</highlight><highlight class="normal">,<sp/>1)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>comments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_message_keyword(</highlight><highlight class="stringliteral">&quot;Error:<sp/>no<sp/>found<sp/>keyword:<sp/>&quot;</highlight><highlight class="normal">,<sp/>mat_keyword[i]);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(-1);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ele_mat[nmat].mat-&gt;MC.K<sp/>==<sp/>0.0)<sp/></highlight><highlight class="comment">/*<sp/>E<sp/>v<sp/>to<sp/>K<sp/>G*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1af625b8a1d8ebc4a81dd229d2274879ac" kindref="member">K</ref><sp/>=<sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1a14c963d6d8380710c186c60602e1f0ca" kindref="member">E</ref><sp/>/<sp/>3.0<sp/>/<sp/>(1.0<sp/>-<sp/>2.0<sp/>*<sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1a06898261af043e5ebf4d9444a4383d54" kindref="member">v</ref>);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1a2195b706c3b8de0b5adb9ccb58eeb4d4" kindref="member">G</ref><sp/>=<sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1a14c963d6d8380710c186c60602e1f0ca" kindref="member">E</ref><sp/>/<sp/>2.0<sp/>/<sp/>(1.0<sp/>+<sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1a06898261af043e5ebf4d9444a4383d54" kindref="member">v</ref>);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ele_mat[nmat].mat-&gt;MC.E<sp/>==<sp/>0.0)<sp/></highlight><highlight class="comment">/*<sp/>K<sp/>G<sp/>to<sp/>E<sp/>v<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1a14c963d6d8380710c186c60602e1f0ca" kindref="member">E</ref><sp/>=<sp/>9.0<sp/>*<sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1af625b8a1d8ebc4a81dd229d2274879ac" kindref="member">K</ref><sp/>*<sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1a2195b706c3b8de0b5adb9ccb58eeb4d4" kindref="member">G</ref><sp/>/</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(3.0<sp/>*<sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1af625b8a1d8ebc4a81dd229d2274879ac" kindref="member">K</ref><sp/>+<sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1a2195b706c3b8de0b5adb9ccb58eeb4d4" kindref="member">G</ref>);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1a06898261af043e5ebf4d9444a4383d54" kindref="member">v</ref><sp/>=<sp/>(3.0<sp/>*<sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1af625b8a1d8ebc4a81dd229d2274879ac" kindref="member">K</ref><sp/>-<sp/>2.0<sp/>*<sp/>ele_mat[nmat].<ref refid="structmat__element__t_1a0ab0303cb2396b3ad2dad522c5d893d2" kindref="member">mat</ref>-&gt;<ref refid="unionany__mat__type_1ac5cf33c7e49efa0a734ad8dd3c7d94ce" kindref="member">MC</ref>.<ref refid="structsolid___m_c__t_1a2195b706c3b8de0b5adb9ccb58eeb4d4" kindref="member">G</ref>)<sp/>/<sp/>2.0<sp/>/</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(3.0<sp/>*<sp/>ele_mat[nmat].mat-&gt;MC.K<sp/>+<sp/>ele_mat[nmat].mat-&gt;MC.G);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nmat++;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stricmp(cons,<sp/></highlight><highlight class="stringliteral">&quot;DP&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ele_mat[nmat].<ref refid="structmat__element__t_1ab7d2c2ff27ff51d56eb332cb487653a6" kindref="member">cons</ref><sp/>=<sp/>DP;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nmat++;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_message(</highlight><highlight class="stringliteral">&quot;Error:<sp/>unrecognised<sp/>boudary<sp/>type.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(find_id<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Error:<sp/>fail<sp/>to<sp/>find<sp/>element<sp/>group<sp/>\&quot;%s\&quot;.\n&quot;</highlight><highlight class="normal">,<sp/>keyword);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(-1);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>solidmat-&gt;<ref refid="struct_solid__mat__structure_1a9bf222653a1caf69f238a56ea88c1178" kindref="member">n_mat</ref><sp/><sp/>=<sp/>nmat;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>solidmat-&gt;<ref refid="struct_solid__mat__structure_1abd0efe4abcf7d9df0896b53186177ae5" kindref="member">elemat</ref><sp/>=<sp/>ele_mat;</highlight></codeline>
<codeline lineno="542"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="materials/solid_mat/push_element_materials.c"/>
  </compounddef>
</doxygen>
