<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="push__contact__materials_8c" kind="file" language="C++">
    <compoundname>push_contact_materials.c</compoundname>
    <includes refid="push__contact__materials_8h" local="yes">push_contact_materials.h</includes>
    <incdepgraph>
      <node id="3">
        <label>../../../io/parser.h</label>
      </node>
      <node id="1">
        <label>materials/solid_mat_contact/push_contact_materials.c</label>
        <link refid="push__contact__materials_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>push_contact_materials.h</label>
        <link refid="push__contact__materials_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="push__contact__materials_8c_1a2195fb1baffa83ac1663a0f8e0a409f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void push_contact_materials</definition>
        <argsstring>(General general, Solidmat solidmat, Contact contact, char *keyword)</argsstring>
        <name>push_contact_materials</name>
        <param>
          <type>General</type>
          <declname>general</declname>
        </param>
        <param>
          <type><ref refid="openfdem__mat_8h_1a10eec44786d5659964548a8edabef182" kindref="member">Solidmat</ref></type>
          <declname>solidmat</declname>
        </param>
        <param>
          <type><ref refid="openfdem__solid__contact_8h_1a33b34b0b5e26b260dc771b8cdc178eb6" kindref="member">Contact</ref></type>
          <declname>contact</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>keyword</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="materials/solid_mat_contact/push_contact_materials.c" line="3" column="6" bodyfile="materials/solid_mat_contact/push_contact_materials.c" bodystart="3" bodyend="269"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="push__contact__materials_8h" kindref="compound">push_contact_materials.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="push__contact__materials_8c_1a2195fb1baffa83ac1663a0f8e0a409f1" kindref="member">push_contact_materials</ref>(General<sp/>general,<sp/><ref refid="struct_solid__mat__structure" kindref="compound">Solidmat</ref><sp/>solidmat,<sp/><ref refid="struct_contact__structure" kindref="compound">Contact</ref><sp/>contact,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>keyword)<sp/>{</highlight></codeline>
<codeline lineno="4"><highlight class="normal"><sp/><sp/><sp/><sp/>UInt<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nmat<sp/><sp/><sp/><sp/>=<sp/>solidmat-&gt;<ref refid="struct_solid__mat__structure_1ae99b5d79ab15d9787ee2c280000e5e80" kindref="member">n_conmat</ref>;</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmat__contact__t" kindref="compound">mat_contact_t</ref>*<sp/>con_mat<sp/>=<sp/>solidmat-&gt;<ref refid="struct_solid__mat__structure_1a73d221d7bb8b8305657cd03245be6d4c" kindref="member">conmat</ref>;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/>Real<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cons[10];</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyword2[20];</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>find_id<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>sn[300];</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>mat_keyword[20];<sp/></highlight><highlight class="comment">/*maximuum<sp/>10<sp/>keyowrds<sp/>for<sp/>each<sp/>model<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>20;<sp/>i++)</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat_keyword[i]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>keyword_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>delim[]<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stricmp(</highlight><highlight class="stringliteral">&quot;all&quot;</highlight><highlight class="normal">,<sp/>keyword))<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nmat<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat<sp/>=<sp/>(<ref refid="structmat__contact__t" kindref="compound">mat_contact_t</ref>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structmat__contact__t" kindref="compound">mat_contact_t</ref>));</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmat__contact__t" kindref="compound">mat_contact_t</ref>*<sp/>temp<sp/>=<sp/>(<ref refid="structmat__contact__t" kindref="compound">mat_contact_t</ref>*)realloc(con_mat,<sp/>(nmat<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structmat__contact__t" kindref="compound">mat_contact_t</ref>));</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;all&apos;<sp/>group<sp/>mat<sp/>assigned<sp/>to<sp/>-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1a2dc8f2cfc67d378bef0c75efc2db58c4" kindref="member">emat1</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1a0b1920255d1a91c3415da2a8108d73ad" kindref="member">emat2</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parse_keyword(general-&gt;InputFile,<sp/>cons);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stricmp(cons,<sp/></highlight><highlight class="stringliteral">&quot;MC&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>a<sp/>line<sp/>to<sp/>avoid<sp/>\n<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>line<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>fscanf(general-&gt;InputFile,<sp/></highlight><highlight class="stringliteral">&quot;%[^\n]%*c&quot;</highlight><highlight class="normal">,<sp/>sn);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>split<sp/>the<sp/>string<sp/>into<sp/>strings<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>ptr<sp/>=<sp/>strtok(sn,<sp/>delim);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ptr<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat_keyword[keyword_count]<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>*<sp/>20);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(mat_keyword[keyword_count],<sp/>ptr);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>strtok(NULL,<sp/>delim);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyword_count++;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1a2e688ba90e704fac8234c9f35f2cf9b3" kindref="member">cons</ref><sp/>=<sp/>CON_MC;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1ac81ac1fe4334de17c8832e9150d09729" kindref="member">mat</ref><sp/><sp/>=<sp/>(<ref refid="unionany__conmat__type" kindref="compound">any_conmat_type</ref>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="unionany__conmat__type" kindref="compound">any_conmat_type</ref>));</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*initialize<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1ac81ac1fe4334de17c8832e9150d09729" kindref="member">mat</ref>-&gt;<ref refid="unionany__conmat__type_1a46ff468723bafdbe65233331e4bf5fe5" kindref="member">MC</ref>.<ref refid="structsolidcon___m_c__t_1a87632afe13128ce6163d016ae441eb29" kindref="member">fri</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1ac81ac1fe4334de17c8832e9150d09729" kindref="member">mat</ref>-&gt;<ref refid="unionany__conmat__type_1a46ff468723bafdbe65233331e4bf5fe5" kindref="member">MC</ref>.<ref refid="structsolidcon___m_c__t_1a2bd23696c07680220a1506e697dc1256" kindref="member">kn</ref><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1ac81ac1fe4334de17c8832e9150d09729" kindref="member">mat</ref>-&gt;<ref refid="unionany__conmat__type_1a46ff468723bafdbe65233331e4bf5fe5" kindref="member">MC</ref>.<ref refid="structsolidcon___m_c__t_1ab43a2e63660bfc6b2dbfce51e0f2db78" kindref="member">ks</ref><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>keyword_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stricmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;kn&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>kn<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1ac81ac1fe4334de17c8832e9150d09729" kindref="member">mat</ref>-&gt;<ref refid="unionany__conmat__type_1a46ff468723bafdbe65233331e4bf5fe5" kindref="member">MC</ref>.<ref refid="structsolidcon___m_c__t_1a2bd23696c07680220a1506e697dc1256" kindref="member">kn</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strnicmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;friction&quot;</highlight><highlight class="normal">,<sp/>3)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>friction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1ac81ac1fe4334de17c8832e9150d09729" kindref="member">mat</ref>-&gt;<ref refid="unionany__conmat__type_1a46ff468723bafdbe65233331e4bf5fe5" kindref="member">MC</ref>.<ref refid="structsolidcon___m_c__t_1a87632afe13128ce6163d016ae441eb29" kindref="member">fri</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stricmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;ks&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>ks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1ac81ac1fe4334de17c8832e9150d09729" kindref="member">mat</ref>-&gt;<ref refid="unionany__conmat__type_1a46ff468723bafdbe65233331e4bf5fe5" kindref="member">MC</ref>.<ref refid="structsolidcon___m_c__t_1ab43a2e63660bfc6b2dbfce51e0f2db78" kindref="member">ks</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strnicmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;#&quot;</highlight><highlight class="normal">,<sp/>1)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>comments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_message_keyword(</highlight><highlight class="stringliteral">&quot;Error:<sp/>no<sp/>found<sp/>keyword:<sp/>&quot;</highlight><highlight class="normal">,<sp/>mat_keyword[i]);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(-1);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nmat++;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stricmp(cons,<sp/></highlight><highlight class="stringliteral">&quot;Dynamic_MC&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>a<sp/>line<sp/>to<sp/>avoid<sp/>\n<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>line<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>fscanf(general-&gt;InputFile,<sp/></highlight><highlight class="stringliteral">&quot;%[^\n]%*c&quot;</highlight><highlight class="normal">,<sp/>sn);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>split<sp/>the<sp/>string<sp/>into<sp/>strings<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>ptr<sp/>=<sp/>strtok(sn,<sp/>delim);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ptr<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat_keyword[keyword_count]<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>*<sp/>20);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(mat_keyword[keyword_count],<sp/>ptr);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>strtok(NULL,<sp/>delim);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyword_count++;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contact-&gt;<ref refid="struct_contact__structure_1a586509c49ff7b1c94667cf02ae123250" kindref="member">force_model</ref><sp/>=<sp/>LIG_F;<sp/></highlight><highlight class="comment">/*only<sp/>support<sp/>for<sp/>LIG<sp/>method*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1a2e688ba90e704fac8234c9f35f2cf9b3" kindref="member">cons</ref><sp/><sp/><sp/>=<sp/>CON_DYNAMIC_MC;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1ac81ac1fe4334de17c8832e9150d09729" kindref="member">mat</ref><sp/><sp/><sp/><sp/>=<sp/>(<ref refid="unionany__conmat__type" kindref="compound">any_conmat_type</ref>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="unionany__conmat__type" kindref="compound">any_conmat_type</ref>));</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*initialize<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1ac81ac1fe4334de17c8832e9150d09729" kindref="member">mat</ref>-&gt;<ref refid="unionany__conmat__type_1a4e5f5e8d2b4e2d02fce010e00e0fc352" kindref="member">D_MC</ref>.<ref refid="structsolidcon__dynamic___m_c__t_1a7b74ac8e9f0b9155db09e31cf45ed553" kindref="member">static_fri</ref><sp/><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1ac81ac1fe4334de17c8832e9150d09729" kindref="member">mat</ref>-&gt;<ref refid="unionany__conmat__type_1a4e5f5e8d2b4e2d02fce010e00e0fc352" kindref="member">D_MC</ref>.<ref refid="structsolidcon__dynamic___m_c__t_1a8688e845284ec39e794ad3e3d5d8bc4d" kindref="member">residual_fri</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1ac81ac1fe4334de17c8832e9150d09729" kindref="member">mat</ref>-&gt;<ref refid="unionany__conmat__type_1a4e5f5e8d2b4e2d02fce010e00e0fc352" kindref="member">D_MC</ref>.<ref refid="structsolidcon__dynamic___m_c__t_1ad6729f8c347b1b09a271069b115ab7d5" kindref="member">slip_rate</ref><sp/><sp/><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1ac81ac1fe4334de17c8832e9150d09729" kindref="member">mat</ref>-&gt;<ref refid="unionany__conmat__type_1a4e5f5e8d2b4e2d02fce010e00e0fc352" kindref="member">D_MC</ref>.<ref refid="structsolidcon__dynamic___m_c__t_1a2bd23696c07680220a1506e697dc1256" kindref="member">kn</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1ac81ac1fe4334de17c8832e9150d09729" kindref="member">mat</ref>-&gt;<ref refid="unionany__conmat__type_1a4e5f5e8d2b4e2d02fce010e00e0fc352" kindref="member">D_MC</ref>.<ref refid="structsolidcon__dynamic___m_c__t_1ab43a2e63660bfc6b2dbfce51e0f2db78" kindref="member">ks</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>keyword_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stricmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;kn&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>kn<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1ac81ac1fe4334de17c8832e9150d09729" kindref="member">mat</ref>-&gt;<ref refid="unionany__conmat__type_1a4e5f5e8d2b4e2d02fce010e00e0fc352" kindref="member">D_MC</ref>.<ref refid="structsolidcon__dynamic___m_c__t_1a2bd23696c07680220a1506e697dc1256" kindref="member">kn</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strnicmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;s_friction&quot;</highlight><highlight class="normal">,<sp/>5)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>static<sp/>friction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1ac81ac1fe4334de17c8832e9150d09729" kindref="member">mat</ref>-&gt;<ref refid="unionany__conmat__type_1a4e5f5e8d2b4e2d02fce010e00e0fc352" kindref="member">D_MC</ref>.<ref refid="structsolidcon__dynamic___m_c__t_1a7b74ac8e9f0b9155db09e31cf45ed553" kindref="member">static_fri</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strnicmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;d_friction&quot;</highlight><highlight class="normal">,<sp/>5)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>dynamic<sp/>friction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1ac81ac1fe4334de17c8832e9150d09729" kindref="member">mat</ref>-&gt;<ref refid="unionany__conmat__type_1a4e5f5e8d2b4e2d02fce010e00e0fc352" kindref="member">D_MC</ref>.<ref refid="structsolidcon__dynamic___m_c__t_1a8688e845284ec39e794ad3e3d5d8bc4d" kindref="member">residual_fri</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strnicmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;slip_rate&quot;</highlight><highlight class="normal">,<sp/>4)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>friction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1ac81ac1fe4334de17c8832e9150d09729" kindref="member">mat</ref>-&gt;<ref refid="unionany__conmat__type_1a4e5f5e8d2b4e2d02fce010e00e0fc352" kindref="member">D_MC</ref>.<ref refid="structsolidcon__dynamic___m_c__t_1ad6729f8c347b1b09a271069b115ab7d5" kindref="member">slip_rate</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stricmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;ks&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>ks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1ac81ac1fe4334de17c8832e9150d09729" kindref="member">mat</ref>-&gt;<ref refid="unionany__conmat__type_1a4e5f5e8d2b4e2d02fce010e00e0fc352" kindref="member">D_MC</ref>.<ref refid="structsolidcon__dynamic___m_c__t_1ab43a2e63660bfc6b2dbfce51e0f2db78" kindref="member">ks</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strnicmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;#&quot;</highlight><highlight class="normal">,<sp/>1)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>comments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_message_keyword(</highlight><highlight class="stringliteral">&quot;Error:<sp/>no<sp/>found<sp/>keyword:<sp/>&quot;</highlight><highlight class="normal">,<sp/>mat_keyword[i]);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(-1);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nmat++;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stricmp(cons,<sp/></highlight><highlight class="stringliteral">&quot;HERTZ&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1a2e688ba90e704fac8234c9f35f2cf9b3" kindref="member">cons</ref><sp/>=<sp/>CON_HERTZ;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1ac81ac1fe4334de17c8832e9150d09729" kindref="member">mat</ref><sp/><sp/>=<sp/>(<ref refid="unionany__conmat__type" kindref="compound">any_conmat_type</ref>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="unionany__conmat__type" kindref="compound">any_conmat_type</ref>));</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nmat++;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stricmp(cons,<sp/></highlight><highlight class="stringliteral">&quot;BB&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1a2e688ba90e704fac8234c9f35f2cf9b3" kindref="member">cons</ref><sp/>=<sp/>CON_BB;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nmat++;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stricmp(cons,<sp/></highlight><highlight class="stringliteral">&quot;FRICTION&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1a2e688ba90e704fac8234c9f35f2cf9b3" kindref="member">cons</ref><sp/>=<sp/>CON_FRICTION;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nmat++;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_message(</highlight><highlight class="stringliteral">&quot;Error:<sp/>unrecognised<sp/>contact<sp/>type.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(solidmat-&gt;<ref refid="struct_solid__mat__structure_1a9bf222653a1caf69f238a56ea88c1178" kindref="member">n_mat</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_message(</highlight><highlight class="stringliteral">&quot;Error:<sp/>no<sp/>element<sp/>material<sp/>groups<sp/>found.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parse_string(general-&gt;InputFile,<sp/>keyword2);<sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>element<sp/>group</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nmat<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat<sp/>=<sp/>(<ref refid="structmat__contact__t" kindref="compound">mat_contact_t</ref>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structmat__contact__t" kindref="compound">mat_contact_t</ref>));</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmat__contact__t" kindref="compound">mat_contact_t</ref>*<sp/>temp<sp/>=<sp/>(<ref refid="structmat__contact__t" kindref="compound">mat_contact_t</ref>*)realloc(con_mat,<sp/>(nmat<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structmat__contact__t" kindref="compound">mat_contact_t</ref>));</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(UInt<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>solidmat-&gt;<ref refid="struct_solid__mat__structure_1a9bf222653a1caf69f238a56ea88c1178" kindref="member">n_mat</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stricmp(solidmat-&gt;<ref refid="struct_solid__mat__structure_1abd0efe4abcf7d9df0896b53186177ae5" kindref="member">elemat</ref>[i].<ref refid="structmat__element__t_1a7bb5e40c10df6a41df64bda1f4bb3e26" kindref="member">tag</ref>,<sp/>keyword))<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1a2dc8f2cfc67d378bef0c75efc2db58c4" kindref="member">emat1</ref><sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stricmp(solidmat-&gt;<ref refid="struct_solid__mat__structure_1abd0efe4abcf7d9df0896b53186177ae5" kindref="member">elemat</ref>[i].<ref refid="structmat__element__t_1a7bb5e40c10df6a41df64bda1f4bb3e26" kindref="member">tag</ref>,<sp/>keyword2))<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1a0b1920255d1a91c3415da2a8108d73ad" kindref="member">emat2</ref><sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parse_keyword(general-&gt;InputFile,<sp/>cons);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stricmp(cons,<sp/></highlight><highlight class="stringliteral">&quot;MC&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>a<sp/>line<sp/>to<sp/>avoid<sp/>\n<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>line<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>fscanf(general-&gt;InputFile,<sp/></highlight><highlight class="stringliteral">&quot;%[^\n]%*c&quot;</highlight><highlight class="normal">,<sp/>sn);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>split<sp/>the<sp/>string<sp/>into<sp/>strings<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>ptr<sp/>=<sp/>strtok(sn,<sp/>delim);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ptr<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat_keyword[keyword_count]<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>*<sp/>20);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(mat_keyword[keyword_count],<sp/>ptr);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>strtok(NULL,<sp/>delim);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyword_count++;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1a2e688ba90e704fac8234c9f35f2cf9b3" kindref="member">cons</ref><sp/>=<sp/>CON_MC;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1ac81ac1fe4334de17c8832e9150d09729" kindref="member">mat</ref><sp/><sp/>=<sp/>(<ref refid="unionany__conmat__type" kindref="compound">any_conmat_type</ref>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="unionany__conmat__type" kindref="compound">any_conmat_type</ref>));</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*initialize<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1ac81ac1fe4334de17c8832e9150d09729" kindref="member">mat</ref>-&gt;<ref refid="unionany__conmat__type_1a46ff468723bafdbe65233331e4bf5fe5" kindref="member">MC</ref>.<ref refid="structsolidcon___m_c__t_1a87632afe13128ce6163d016ae441eb29" kindref="member">fri</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1ac81ac1fe4334de17c8832e9150d09729" kindref="member">mat</ref>-&gt;<ref refid="unionany__conmat__type_1a46ff468723bafdbe65233331e4bf5fe5" kindref="member">MC</ref>.<ref refid="structsolidcon___m_c__t_1a2bd23696c07680220a1506e697dc1256" kindref="member">kn</ref><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1ac81ac1fe4334de17c8832e9150d09729" kindref="member">mat</ref>-&gt;<ref refid="unionany__conmat__type_1a46ff468723bafdbe65233331e4bf5fe5" kindref="member">MC</ref>.<ref refid="structsolidcon___m_c__t_1ab43a2e63660bfc6b2dbfce51e0f2db78" kindref="member">ks</ref><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>keyword_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stricmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;kn&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>kn<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1ac81ac1fe4334de17c8832e9150d09729" kindref="member">mat</ref>-&gt;<ref refid="unionany__conmat__type_1a46ff468723bafdbe65233331e4bf5fe5" kindref="member">MC</ref>.<ref refid="structsolidcon___m_c__t_1a2bd23696c07680220a1506e697dc1256" kindref="member">kn</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strnicmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;friction&quot;</highlight><highlight class="normal">,<sp/>3)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>friction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1ac81ac1fe4334de17c8832e9150d09729" kindref="member">mat</ref>-&gt;<ref refid="unionany__conmat__type_1a46ff468723bafdbe65233331e4bf5fe5" kindref="member">MC</ref>.<ref refid="structsolidcon___m_c__t_1a87632afe13128ce6163d016ae441eb29" kindref="member">fri</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stricmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;ks&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>ks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1ac81ac1fe4334de17c8832e9150d09729" kindref="member">mat</ref>-&gt;<ref refid="unionany__conmat__type_1a46ff468723bafdbe65233331e4bf5fe5" kindref="member">MC</ref>.<ref refid="structsolidcon___m_c__t_1ab43a2e63660bfc6b2dbfce51e0f2db78" kindref="member">ks</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strnicmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;#&quot;</highlight><highlight class="normal">,<sp/>1)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>comments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_message_keyword(</highlight><highlight class="stringliteral">&quot;Error:<sp/>no<sp/>found<sp/>keyword:<sp/>&quot;</highlight><highlight class="normal">,<sp/>mat_keyword[i]);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(-1);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nmat++;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stricmp(cons,<sp/></highlight><highlight class="stringliteral">&quot;Dynamic_MC&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>a<sp/>line<sp/>to<sp/>avoid<sp/>\n<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>line<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>fscanf(general-&gt;InputFile,<sp/></highlight><highlight class="stringliteral">&quot;%[^\n]%*c&quot;</highlight><highlight class="normal">,<sp/>sn);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>split<sp/>the<sp/>string<sp/>into<sp/>strings<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>ptr<sp/>=<sp/>strtok(sn,<sp/>delim);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ptr<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat_keyword[keyword_count]<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>*<sp/>20);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(mat_keyword[keyword_count],<sp/>ptr);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>strtok(NULL,<sp/>delim);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyword_count++;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contact-&gt;<ref refid="struct_contact__structure_1a586509c49ff7b1c94667cf02ae123250" kindref="member">force_model</ref><sp/>=<sp/>LIG_F;<sp/></highlight><highlight class="comment">/*only<sp/>support<sp/>for<sp/>LIG<sp/>method*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1a2e688ba90e704fac8234c9f35f2cf9b3" kindref="member">cons</ref><sp/><sp/><sp/>=<sp/>CON_DYNAMIC_MC;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1ac81ac1fe4334de17c8832e9150d09729" kindref="member">mat</ref><sp/><sp/><sp/><sp/>=<sp/>(<ref refid="unionany__conmat__type" kindref="compound">any_conmat_type</ref>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="unionany__conmat__type" kindref="compound">any_conmat_type</ref>));</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*initialize<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1ac81ac1fe4334de17c8832e9150d09729" kindref="member">mat</ref>-&gt;<ref refid="unionany__conmat__type_1a4e5f5e8d2b4e2d02fce010e00e0fc352" kindref="member">D_MC</ref>.<ref refid="structsolidcon__dynamic___m_c__t_1a7b74ac8e9f0b9155db09e31cf45ed553" kindref="member">static_fri</ref><sp/><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1ac81ac1fe4334de17c8832e9150d09729" kindref="member">mat</ref>-&gt;<ref refid="unionany__conmat__type_1a4e5f5e8d2b4e2d02fce010e00e0fc352" kindref="member">D_MC</ref>.<ref refid="structsolidcon__dynamic___m_c__t_1a8688e845284ec39e794ad3e3d5d8bc4d" kindref="member">residual_fri</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1ac81ac1fe4334de17c8832e9150d09729" kindref="member">mat</ref>-&gt;<ref refid="unionany__conmat__type_1a4e5f5e8d2b4e2d02fce010e00e0fc352" kindref="member">D_MC</ref>.<ref refid="structsolidcon__dynamic___m_c__t_1ad6729f8c347b1b09a271069b115ab7d5" kindref="member">slip_rate</ref><sp/><sp/><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1ac81ac1fe4334de17c8832e9150d09729" kindref="member">mat</ref>-&gt;<ref refid="unionany__conmat__type_1a4e5f5e8d2b4e2d02fce010e00e0fc352" kindref="member">D_MC</ref>.<ref refid="structsolidcon__dynamic___m_c__t_1a2bd23696c07680220a1506e697dc1256" kindref="member">kn</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1ac81ac1fe4334de17c8832e9150d09729" kindref="member">mat</ref>-&gt;<ref refid="unionany__conmat__type_1a4e5f5e8d2b4e2d02fce010e00e0fc352" kindref="member">D_MC</ref>.<ref refid="structsolidcon__dynamic___m_c__t_1ab43a2e63660bfc6b2dbfce51e0f2db78" kindref="member">ks</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>keyword_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stricmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;kn&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>kn<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1ac81ac1fe4334de17c8832e9150d09729" kindref="member">mat</ref>-&gt;<ref refid="unionany__conmat__type_1a4e5f5e8d2b4e2d02fce010e00e0fc352" kindref="member">D_MC</ref>.<ref refid="structsolidcon__dynamic___m_c__t_1a2bd23696c07680220a1506e697dc1256" kindref="member">kn</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strnicmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;s_friction&quot;</highlight><highlight class="normal">,<sp/>5)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>static<sp/>friction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1ac81ac1fe4334de17c8832e9150d09729" kindref="member">mat</ref>-&gt;<ref refid="unionany__conmat__type_1a4e5f5e8d2b4e2d02fce010e00e0fc352" kindref="member">D_MC</ref>.<ref refid="structsolidcon__dynamic___m_c__t_1a7b74ac8e9f0b9155db09e31cf45ed553" kindref="member">static_fri</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strnicmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;d_friction&quot;</highlight><highlight class="normal">,<sp/>5)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>dynamic<sp/>friction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1ac81ac1fe4334de17c8832e9150d09729" kindref="member">mat</ref>-&gt;<ref refid="unionany__conmat__type_1a4e5f5e8d2b4e2d02fce010e00e0fc352" kindref="member">D_MC</ref>.<ref refid="structsolidcon__dynamic___m_c__t_1a8688e845284ec39e794ad3e3d5d8bc4d" kindref="member">residual_fri</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strnicmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;slip_rate&quot;</highlight><highlight class="normal">,<sp/>4)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>friction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1ac81ac1fe4334de17c8832e9150d09729" kindref="member">mat</ref>-&gt;<ref refid="unionany__conmat__type_1a4e5f5e8d2b4e2d02fce010e00e0fc352" kindref="member">D_MC</ref>.<ref refid="structsolidcon__dynamic___m_c__t_1ad6729f8c347b1b09a271069b115ab7d5" kindref="member">slip_rate</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stricmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;ks&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>ks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1ac81ac1fe4334de17c8832e9150d09729" kindref="member">mat</ref>-&gt;<ref refid="unionany__conmat__type_1a4e5f5e8d2b4e2d02fce010e00e0fc352" kindref="member">D_MC</ref>.<ref refid="structsolidcon__dynamic___m_c__t_1ab43a2e63660bfc6b2dbfce51e0f2db78" kindref="member">ks</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strnicmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;#&quot;</highlight><highlight class="normal">,<sp/>1)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>comments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_message_keyword(</highlight><highlight class="stringliteral">&quot;Error:<sp/>no<sp/>found<sp/>keyword:<sp/>&quot;</highlight><highlight class="normal">,<sp/>mat_keyword[i]);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(-1);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nmat++;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stricmp(cons,<sp/></highlight><highlight class="stringliteral">&quot;HERTZ&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1a2e688ba90e704fac8234c9f35f2cf9b3" kindref="member">cons</ref><sp/>=<sp/>CON_HERTZ;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1ac81ac1fe4334de17c8832e9150d09729" kindref="member">mat</ref><sp/><sp/>=<sp/>(<ref refid="unionany__conmat__type" kindref="compound">any_conmat_type</ref>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="unionany__conmat__type" kindref="compound">any_conmat_type</ref>));</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nmat++;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stricmp(cons,<sp/></highlight><highlight class="stringliteral">&quot;BB&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1a2e688ba90e704fac8234c9f35f2cf9b3" kindref="member">cons</ref><sp/>=<sp/>CON_BB;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nmat++;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stricmp(cons,<sp/></highlight><highlight class="stringliteral">&quot;FRICTION&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con_mat[nmat].<ref refid="structmat__contact__t_1a2e688ba90e704fac8234c9f35f2cf9b3" kindref="member">cons</ref><sp/>=<sp/>CON_FRICTION;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nmat++;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_message(</highlight><highlight class="stringliteral">&quot;Error:<sp/>unrecognised<sp/>contact<sp/>type.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>solidmat-&gt;<ref refid="struct_solid__mat__structure_1ae99b5d79ab15d9787ee2c280000e5e80" kindref="member">n_conmat</ref><sp/>=<sp/>nmat;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>solidmat-&gt;<ref refid="struct_solid__mat__structure_1a73d221d7bb8b8305657cd03245be6d4c" kindref="member">conmat</ref><sp/><sp/><sp/>=<sp/>con_mat;</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="materials/solid_mat_contact/push_contact_materials.c"/>
  </compounddef>
</doxygen>
