<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="push__gas__materials_8c" kind="file" language="C++">
    <compoundname>push_gas_materials.c</compoundname>
    <includes refid="push__element__materials_8h" local="yes">push_element_materials.h</includes>
    <incdepgraph>
      <node id="1">
        <label>materials/solid_mat/push_gas_materials.c</label>
        <link refid="push__gas__materials_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>../../../io/parser.h</label>
      </node>
      <node id="2">
        <label>push_element_materials.h</label>
        <link refid="push__element__materials_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="push__gas__materials_8c_1aa074f467d929e60790e72e4cfd64b5cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void push_gas_materials</definition>
        <argsstring>(General general, Solidmat solidmat)</argsstring>
        <name>push_gas_materials</name>
        <param>
          <type>General</type>
          <declname>general</declname>
        </param>
        <param>
          <type><ref refid="openfdem__mat_8h_1a10eec44786d5659964548a8edabef182" kindref="member">Solidmat</ref></type>
          <declname>solidmat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="materials/solid_mat/push_gas_materials.c" line="3" column="6" bodyfile="materials/solid_mat/push_gas_materials.c" bodystart="3" bodyend="59"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="push__element__materials_8h" kindref="compound">push_element_materials.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="push__gas__materials_8c_1aa074f467d929e60790e72e4cfd64b5cd" kindref="member">push_gas_materials</ref>(General<sp/>general,<sp/><ref refid="struct_solid__mat__structure" kindref="compound">Solidmat</ref><sp/>solidmat)<sp/>{</highlight></codeline>
<codeline lineno="4"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>sn[300];</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>mat_keyword[20];<sp/></highlight><highlight class="comment">/*maximuum<sp/>10<sp/>keyowrds<sp/>for<sp/>each<sp/>model<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>20;<sp/>i++)</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat_keyword[i]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>keyword_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>delim[]<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>a<sp/>line<sp/>to<sp/>avoid<sp/>\n<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>line<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>fscanf(general-&gt;InputFile,<sp/></highlight><highlight class="stringliteral">&quot;%[^\n]%*c&quot;</highlight><highlight class="normal">,<sp/>sn);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>split<sp/>the<sp/>string<sp/>into<sp/>strings<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>ptr<sp/>=<sp/>strtok(sn,<sp/>delim);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ptr<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat_keyword[keyword_count]<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>*<sp/>20);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(mat_keyword[keyword_count],<sp/>ptr);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>strtok(NULL,<sp/>delim);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyword_count++;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>initialize<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>solidmat-&gt;<ref refid="struct_solid__mat__structure_1ac1f0a6c41ddcbfcf1be8452ce952743f" kindref="member">gas</ref>.<ref refid="structmat__gas__t_1a1acf479191915abde27735538dc3e420" kindref="member">initial_den</ref><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>solidmat-&gt;<ref refid="struct_solid__mat__structure_1ac1f0a6c41ddcbfcf1be8452ce952743f" kindref="member">gas</ref>.<ref refid="structmat__gas__t_1abf649a082274df7d94ce93381a0711e8" kindref="member">permiability</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>solidmat-&gt;<ref refid="struct_solid__mat__structure_1ac1f0a6c41ddcbfcf1be8452ce952743f" kindref="member">gas</ref>.<ref refid="structmat__gas__t_1aa2738666517200656d038ea29a1d2451" kindref="member">initial_bulk</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>solidmat-&gt;<ref refid="struct_solid__mat__structure_1ac1f0a6c41ddcbfcf1be8452ce952743f" kindref="member">gas</ref>.<ref refid="structmat__gas__t_1a34ed25845d2259c437e08a99cd7cc2d3" kindref="member">constant_B</ref><sp/><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>solidmat-&gt;<ref refid="struct_solid__mat__structure_1ac1f0a6c41ddcbfcf1be8452ce952743f" kindref="member">gas</ref>.<ref refid="structmat__gas__t_1ab7eeb7bf31a421bd2f657cd118290d6c" kindref="member">alpha</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>keyword_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strnicmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;density0&quot;</highlight><highlight class="normal">,<sp/>3)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>initial<sp/>density<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solidmat-&gt;<ref refid="struct_solid__mat__structure_1ac1f0a6c41ddcbfcf1be8452ce952743f" kindref="member">gas</ref>.<ref refid="structmat__gas__t_1a1acf479191915abde27735538dc3e420" kindref="member">initial_den</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strnicmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;permiability&quot;</highlight><highlight class="normal">,<sp/>4)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>permiability<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solidmat-&gt;<ref refid="struct_solid__mat__structure_1ac1f0a6c41ddcbfcf1be8452ce952743f" kindref="member">gas</ref>.<ref refid="structmat__gas__t_1abf649a082274df7d94ce93381a0711e8" kindref="member">permiability</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stricmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;K0&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>initial_bulk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solidmat-&gt;<ref refid="struct_solid__mat__structure_1ac1f0a6c41ddcbfcf1be8452ce952743f" kindref="member">gas</ref>.<ref refid="structmat__gas__t_1aa2738666517200656d038ea29a1d2451" kindref="member">initial_bulk</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stricmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>constant_B<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solidmat-&gt;<ref refid="struct_solid__mat__structure_1ac1f0a6c41ddcbfcf1be8452ce952743f" kindref="member">gas</ref>.<ref refid="structmat__gas__t_1a34ed25845d2259c437e08a99cd7cc2d3" kindref="member">constant_B</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strnicmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;alpha&quot;</highlight><highlight class="normal">,<sp/>1)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>alpha<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solidmat-&gt;<ref refid="struct_solid__mat__structure_1ac1f0a6c41ddcbfcf1be8452ce952743f" kindref="member">gas</ref>.<ref refid="structmat__gas__t_1ab7eeb7bf31a421bd2f657cd118290d6c" kindref="member">alpha</ref><sp/>=<sp/>strtod(mat_keyword[i<sp/>+<sp/>1],<sp/>NULL);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strnicmp(mat_keyword[i],<sp/></highlight><highlight class="stringliteral">&quot;#&quot;</highlight><highlight class="normal">,<sp/>1)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>comments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dump_message_keyword(</highlight><highlight class="stringliteral">&quot;Error:<sp/>no<sp/>found<sp/>keyword:<sp/>&quot;</highlight><highlight class="normal">,<sp/>mat_keyword[i]);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(-1);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="materials/solid_mat/push_gas_materials.c"/>
  </compounddef>
</doxygen>
